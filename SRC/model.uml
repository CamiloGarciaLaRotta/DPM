<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:PapyrusJava="http://www.eclipse.org/papyrus/PapyrusJava/1" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:standard="http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_2ZRzsLQ1Eeaa7p8tp3-_vA" name="RootElement">
    <packagedElement xmi:type="uml:Package" xmi:id="_-fP1QLQ1Eeaa7p8tp3-_vA" name="importedTypes">
      <packagedElement xmi:type="uml:Package" xmi:id="_-fP1QbQ1Eeaa7p8tp3-_vA" name="lejos">
        <packagedElement xmi:type="uml:Package" xmi:id="_-fP1QrQ1Eeaa7p8tp3-_vA" name="robotics">
          <packagedElement xmi:type="uml:Class" xmi:id="_-fQcULQ1Eeaa7p8tp3-_vA" name="SampleProvider"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Package" xmi:id="_-hmls7Q1Eeaa7p8tp3-_vA" name="hardware">
          <packagedElement xmi:type="uml:Package" xmi:id="_-hmltLQ1Eeaa7p8tp3-_vA" name="sensor">
            <packagedElement xmi:type="uml:Class" xmi:id="_-hnMwLQ1Eeaa7p8tp3-_vA" name="EV3ColorSensor"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_-h2dUbQ1Eeaa7p8tp3-_vA" name="SensorModes"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Package" xmi:id="_-hqQErQ1Eeaa7p8tp3-_vA" name="port">
            <packagedElement xmi:type="uml:Class" xmi:id="_-hqQE7Q1Eeaa7p8tp3-_vA" name="Port"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Package" xmi:id="_-hvIkbQ1Eeaa7p8tp3-_vA" name="motor">
            <packagedElement xmi:type="uml:Class" xmi:id="_-hvIkrQ1Eeaa7p8tp3-_vA" name="EV3LargeRegulatedMotor"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_-hw9wLQ1Eeaa7p8tp3-_vA" name="EV3MediumRegulatedMotor"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Package" xmi:id="_-iCqkrQ1Eeaa7p8tp3-_vA" name="lcd">
            <packagedElement xmi:type="uml:Class" xmi:id="_-iCqk7Q1Eeaa7p8tp3-_vA" name="TextLCD"/>
          </packagedElement>
        </packagedElement>
        <packagedElement xmi:type="uml:Package" xmi:id="_-rWXkLQ1Eeaa7p8tp3-_vA" name="utility">
          <packagedElement xmi:type="uml:Interface" xmi:id="_-rW-oLQ1Eeaa7p8tp3-_vA" name="TimerListener"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_-rbQELQ1Eeaa7p8tp3-_vA" name="Timer"/>
        </packagedElement>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_-hoa4bQ1Eeaa7p8tp3-_vA" name="java">
      <packagedElement xmi:type="uml:Package" xmi:id="_-hoa4rQ1Eeaa7p8tp3-_vA" name="java">
        <packagedElement xmi:type="uml:Package" xmi:id="_-hoa47Q1Eeaa7p8tp3-_vA" name="lang">
          <packagedElement xmi:type="uml:Class" xmi:id="_-hpB8LQ1Eeaa7p8tp3-_vA" name="Object"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_-rFR0bQ1Eeaa7p8tp3-_vA" name="String"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_-rxOUbQ1Eeaa7p8tp3-_vA" name="Thread"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Package" xmi:id="_-rMmkLQ1Eeaa7p8tp3-_vA" name="util">
          <packagedElement xmi:type="uml:Class" xmi:id="_-rMmkbQ1Eeaa7p8tp3-_vA" name="HashMap"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Package" xmi:id="_-rRfEbQ1Eeaa7p8tp3-_vA" name="io">
          <packagedElement xmi:type="uml:Interface" xmi:id="_-rSGILQ1Eeaa7p8tp3-_vA" name="IOException"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_-vepoLQ1Eeaa7p8tp3-_vA" name="DataInputStream"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Package" xmi:id="_-r0RorQ1Eeaa7p8tp3-_vA" name="awt">
          <packagedElement xmi:type="uml:Class" xmi:id="_-r0Ro7Q1Eeaa7p8tp3-_vA" name="Rectangle"/>
        </packagedElement>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_OT3kkLQ2Eeaa7p8tp3-_vA" name="Final15">
      <packagedElement xmi:type="uml:Package" href="chassis.uml#_S4BFMLQ2Eeaa7p8tp3-_vA"/>
      <packagedElement xmi:type="uml:Package" xmi:id="_S44A0LQ2Eeaa7p8tp3-_vA" name="wifi">
        <elementImport xmi:type="uml:ElementImport" xmi:id="_9w_9QLQ3Eeaa7p8tp3-_vA">
          <importedElement xmi:type="uml:Package" href="chassis.uml#_S4BFMLQ2Eeaa7p8tp3-_vA"/>
        </elementImport>
        <packagedElement xmi:type="uml:Class" xmi:id="_S44A0bQ2Eeaa7p8tp3-_vA" name="WifiConnection" visibility="public">
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TFaoALQ2Eeaa7p8tp3-_vA" name="StartData" visibility="public" type="_-rMmkbQ1Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFhVsLQ2Eeaa7p8tp3-_vA" name="WifiConnection" specification="_TFaoAbQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    this(serverIP, teamNumber, true);
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFlAELQ2Eeaa7p8tp3-_vA" name="WifiConnection" specification="_TFh8wLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    // Open connection to the server and data streams
    // semi-abritrary port number&quot;
    int port = 2000 + teamNumber;
    Socket socketClient = new Socket(serverIP, port);
    DataOutputStream dos = new DataOutputStream(socketClient.getOutputStream());
    DataInputStream dis = new DataInputStream(socketClient.getInputStream());
    if (debugPrint) {
        System.out.println(&quot;Connected\nWaiting for data&quot;);
    }
    // Wait for the server transmission to arrive
    while (dis.available() &lt;= 0) try {
        Thread.sleep(10);
    } catch (InterruptedException e) {
    }
    // Parse transmission
    this.StartData = ParseTransmission.parseData(dis);
    if (debugPrint) {
        System.out.println(&quot;Data received&quot;);
    }
    // End the wifi connection
    dis.close();
    dos.close();
    socketClient.close();
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFaoAbQ2Eeaa7p8tp3-_vA" name="WifiConnection" visibility="public" method="_TFhVsLQ2Eeaa7p8tp3-_vA" raisedException="_TFe5cLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFeSYLQ2Eeaa7p8tp3-_vA" name="serverIP" type="_-rFR0bQ1Eeaa7p8tp3-_vA"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFeSYbQ2Eeaa7p8tp3-_vA" name="teamNumber">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFh8wLQ2Eeaa7p8tp3-_vA" name="WifiConnection" visibility="public" method="_TFlAELQ2Eeaa7p8tp3-_vA" raisedException="_TFe5cLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFjx8bQ2Eeaa7p8tp3-_vA" name="serverIP" type="_-rFR0bQ1Eeaa7p8tp3-_vA"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFkZALQ2Eeaa7p8tp3-_vA" name="teamNumber">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFkZAbQ2Eeaa7p8tp3-_vA" name="debugPrint">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_TFW9oLQ2Eeaa7p8tp3-_vA" name="ParseTransmission" visibility="public">
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFYLwbQ2Eeaa7p8tp3-_vA" name="parseData" specification="_TFXksLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    HashMap&lt;String, Integer> StartData;
    try {
        ObjectInputStream ois = new ObjectInputStream(dis);
        StartData = (HashMap&lt;String, Integer>) ois.readObject();
    } catch (Exception e) {
        StartData = null;
    }
    return StartData;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFZZ4LQ2Eeaa7p8tp3-_vA" name="ignore" specification="_TFYLwrQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    dis.readChar();
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFXksLQ2Eeaa7p8tp3-_vA" name="parseData" visibility="public" isStatic="true" method="_TFYLwbQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFXksbQ2Eeaa7p8tp3-_vA" type="_-rMmkbQ1Eeaa7p8tp3-_vA" direction="return"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFYLwLQ2Eeaa7p8tp3-_vA" name="dis" type="_-vepoLQ1Eeaa7p8tp3-_vA"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFYLwrQ2Eeaa7p8tp3-_vA" name="ignore" visibility="public" isStatic="true" method="_TFZZ4LQ2Eeaa7p8tp3-_vA" raisedException="_-rSGILQ1Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFYy0LQ2Eeaa7p8tp3-_vA" name="dis" type="_-vepoLQ1Eeaa7p8tp3-_vA"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_TFe5cLQ2Eeaa7p8tp3-_vA" name="IOException"/>
        <packagedElement xmi:type="uml:Enumeration" xmi:id="_TFmOMLQ2Eeaa7p8tp3-_vA" name="StartCorner" visibility="public">
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TFncU7Q2Eeaa7p8tp3-_vA" name="id" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TFoDYLQ2Eeaa7p8tp3-_vA" name="x" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TFoDYbQ2Eeaa7p8tp3-_vA" name="y" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TFoqcLQ2Eeaa7p8tp3-_vA" name="name" visibility="private" type="_-rFR0bQ1Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFp4kLQ2Eeaa7p8tp3-_vA" name="StartCorner" visibility="private">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFsU0LQ2Eeaa7p8tp3-_vA" name="id">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFsU0bQ2Eeaa7p8tp3-_vA" name="x">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFsU0rQ2Eeaa7p8tp3-_vA" name="y">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFs74LQ2Eeaa7p8tp3-_vA" name="name" type="_-rFR0bQ1Eeaa7p8tp3-_vA"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFs74bQ2Eeaa7p8tp3-_vA" name="toString" visibility="public">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFti8LQ2Eeaa7p8tp3-_vA" type="_-rFR0bQ1Eeaa7p8tp3-_vA" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFuKALQ2Eeaa7p8tp3-_vA" name="getCooridinates" visibility="public">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFuKAbQ2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TFuKArQ2Eeaa7p8tp3-_vA"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TFuxELQ2Eeaa7p8tp3-_vA" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFuxEbQ2Eeaa7p8tp3-_vA" name="getX" visibility="public">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFuxErQ2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFvYILQ2Eeaa7p8tp3-_vA" name="getY" visibility="public">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFvYIbQ2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFvYIrQ2Eeaa7p8tp3-_vA" name="getId" visibility="public">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFvYI7Q2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFv_MLQ2Eeaa7p8tp3-_vA" name="lookupCorner" visibility="public" isStatic="true">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFv_MbQ2Eeaa7p8tp3-_vA" type="_TFmOMLQ2Eeaa7p8tp3-_vA" direction="return"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFv_MrQ2Eeaa7p8tp3-_vA" name="cornerId">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TFmOMbQ2Eeaa7p8tp3-_vA" name="BOTTOM_LEFT">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_TFm1QLQ2Eeaa7p8tp3-_vA" name="specification">
              <language>JAVA</language>
              <body>1, 0, 0, &quot;BL&quot;</body>
            </specification>
          </ownedLiteral>
          <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TFm1QbQ2Eeaa7p8tp3-_vA" name="BOTTOM_RIGHT">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_TFm1QrQ2Eeaa7p8tp3-_vA" name="specification">
              <language>JAVA</language>
              <body>2, 300, 0, &quot;BR&quot;</body>
            </specification>
          </ownedLiteral>
          <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TFm1Q7Q2Eeaa7p8tp3-_vA" name="TOP_RIGHT">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_TFm1RLQ2Eeaa7p8tp3-_vA" name="specification">
              <language>JAVA</language>
              <body>3, 300, 300, &quot;TR&quot;</body>
            </specification>
          </ownedLiteral>
          <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TFm1RbQ2Eeaa7p8tp3-_vA" name="TOP_LEFT">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_TFncULQ2Eeaa7p8tp3-_vA" name="specification">
              <language>JAVA</language>
              <body>4, 0, 300, &quot;TL&quot;</body>
            </specification>
          </ownedLiteral>
          <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TFncUbQ2Eeaa7p8tp3-_vA" name="NULL">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_TFncUrQ2Eeaa7p8tp3-_vA" name="specification">
              <language>JAVA</language>
              <body>0, 0, 0, &quot;NULL&quot;</body>
            </specification>
          </ownedLiteral>
        </packagedElement>
        <packagedElement xmi:type="uml:Dependency" xmi:id="_AWRZkLQ8Eeaa7p8tp3-_vA" client="_S44A0LQ2Eeaa7p8tp3-_vA">
          <supplier xmi:type="uml:Package" href="chassis.uml#_S4BFMLQ2Eeaa7p8tp3-_vA"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_TBsloLQ2Eeaa7p8tp3-_vA" name="utilities">
        <elementImport xmi:type="uml:ElementImport" xmi:id="_reBVILQ3Eeaa7p8tp3-_vA">
          <importedElement xmi:type="uml:Package" href="chassis.uml#_S4BFMLQ2Eeaa7p8tp3-_vA"/>
        </elementImport>
        <packagedElement xmi:type="uml:Class" xmi:id="_TBslobQ2Eeaa7p8tp3-_vA" name="Odometer" visibility="public">
          <generalization xmi:type="uml:Generalization" xmi:id="_TEmIoLQ2Eeaa7p8tp3-_vA" general="_-rxOUbQ1Eeaa7p8tp3-_vA"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEn90LQ2Eeaa7p8tp3-_vA" name="ROTATE_SPEED" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEn90bQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>150</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEok4LQ2Eeaa7p8tp3-_vA" name="NAVIGATE_SPEED" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEok4bQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>100</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEok4rQ2Eeaa7p8tp3-_vA" name="x" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEpL8LQ2Eeaa7p8tp3-_vA" name="y" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEpL8bQ2Eeaa7p8tp3-_vA" name="theta" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEpL8rQ2Eeaa7p8tp3-_vA" name="leftMotorTachoCount" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEpL87Q2Eeaa7p8tp3-_vA" name="rightMotorTachoCount" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEpzALQ2Eeaa7p8tp3-_vA" name="leftMotor" visibility="private" type="_-hvIkrQ1Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEpzAbQ2Eeaa7p8tp3-_vA" name="rightMotor" visibility="private" type="_-hvIkrQ1Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEqaELQ2Eeaa7p8tp3-_vA" name="mutex" visibility="private" type="_-hpB8LQ1Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEqaEbQ2Eeaa7p8tp3-_vA" name="oldltacho" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEqaErQ2Eeaa7p8tp3-_vA" name="oldrtacho" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TErBILQ2Eeaa7p8tp3-_vA" name="data" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TEvSkLQ2Eeaa7p8tp3-_vA" name="Odometer" specification="_TErBIbQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    this.leftMotor = leftMotor;
    this.rightMotor = rightMotor;
    this.x = this.y = 0.0;
    this.theta = 0.5 * Math.PI;
    this.leftMotorTachoCount = this.rightMotorTachoCount = 0;
    this.oldltacho = this.oldrtacho = 0;
    this.leftMotor.resetTachoCount();
    this.rightMotor.resetTachoCount();
    mutex = new Object();
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TEwgsbQ2Eeaa7p8tp3-_vA" name="run" specification="_TEwgsLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    long updateStart, updateEnd;
    while (true) {
        updateStart = System.currentTimeMillis();
        this.leftMotorTachoCount = this.leftMotor.getTachoCount();
        this.rightMotorTachoCount = this.rightMotor.getTachoCount();
        //left wheel movement, right wheel movement, change in heading, and change in position
        double dLeft, dRight, dTheta, dPos;
        dLeft = Util.WHEEL_RADIUS * Math.PI * (this.leftMotorTachoCount - this.oldltacho) / 180.0;
        dRight = Util.WHEEL_RADIUS * Math.PI * (this.rightMotorTachoCount - this.oldrtacho) / 180.0;
        oldltacho = leftMotorTachoCount;
        oldrtacho = rightMotorTachoCount;
        dTheta = (-dLeft + dRight) / Util.TRACK;
        dPos = (dLeft + dRight) / 2;
        synchronized (mutex) {
            /**
				 * Don't use the variables x, y, or theta anywhere but here!
				 * Only update the values of x, y, and theta in this block. 
				 * Do not perform complex math
				 * 
				 */
            theta += dTheta + 2 * Math.PI;
            //radians - wrap around
            theta %= 2 * Math.PI;
            //if(theta &lt; 0.0) theta += 2*Math.PI; //No negative angles
            y += dPos * Math.sin(theta);
            x += dPos * Math.cos(theta);
        }
        // this ensures that the odometer only runs once every period
        updateEnd = System.currentTimeMillis();
        if (updateEnd - updateStart &lt; Util.ODOMETER_PERIOD) {
            try {
                Thread.sleep(Util.ODOMETER_PERIOD - (updateEnd - updateStart));
            } catch (InterruptedException e) {
            }
        }
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TExu07Q2Eeaa7p8tp3-_vA" name="getMotors" specification="_TExHwLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    EV3LargeRegulatedMotor[] motors = { leftMotor, rightMotor };
    return motors;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TEyV47Q2Eeaa7p8tp3-_vA" name="setMotorSpeeds" specification="_TEyV4LQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    leftMotor.setSpeed(speedL);
    rightMotor.setSpeed(speedR);
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TEy88bQ2Eeaa7p8tp3-_vA" name="setMotorSpeed" specification="_TEyV5LQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    leftMotor.setSpeed(speed);
    rightMotor.setSpeed(speed);
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TEy887Q2Eeaa7p8tp3-_vA" name="forwardMotors" specification="_TEy88rQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    leftMotor.forward();
    rightMotor.forward();
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TEy89bQ2Eeaa7p8tp3-_vA" name="backwardMotors" specification="_TEy89LQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    leftMotor.backward();
    rightMotor.backward();
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TE1ZMrQ2Eeaa7p8tp3-_vA" name="spin" specification="_TE1ZMLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    if (dir == TURNDIR.CW) {
        leftMotor.forward();
        rightMotor.backward();
    } else {
        leftMotor.backward();
        rightMotor.forward();
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TE2AQbQ2Eeaa7p8tp3-_vA" name="stopMotors" specification="_TE2AQLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    setMotorSpeed(0);
    forwardMotors();
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TE31cbQ2Eeaa7p8tp3-_vA" name="moveCM" specification="_TE3OYbQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    setMotorSpeeds(NAVIGATE_SPEED, NAVIGATE_SPEED);
    if (dir == LINEDIR.Forward)
        forwardMotors();
    else
        backwardMotors();
    double startpos[] = new double[3];
    double curpos[] = new double[3];
    getPosition(startpos, new boolean[] { true, true, true });
    do {
        getPosition(curpos, new boolean[] { true, true, true });
    } while (euclideanDistance(startpos, curpos) &lt; distance);
    if (stop) {
        setMotorSpeed(0);
        forwardMotors();
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TE64wbQ2Eeaa7p8tp3-_vA" name="getPosition" specification="_TE5DkLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    synchronized (mutex) {
        if (update[0])
            position[0] = x;
        if (update[1])
            position[1] = y;
        if (update[2])
            position[2] = theta;
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TE8t8bQ2Eeaa7p8tp3-_vA" name="getPosition" specification="_TE7f0LQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    synchronized (mutex) {
        position[0] = x;
        position[1] = y;
        position[2] = theta;
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TE9VAbQ2Eeaa7p8tp3-_vA" name="getX" specification="_TE8t8rQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    double result;
    synchronized (mutex) {
        result = x;
    }
    return result;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TE98EbQ2Eeaa7p8tp3-_vA" name="getY" specification="_TE9VArQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    double result;
    synchronized (mutex) {
        result = y;
    }
    return result;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TE98FLQ2Eeaa7p8tp3-_vA" name="getTheta" specification="_TE98ErQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    double result;
    synchronized (mutex) {
        result = theta;
    }
    return result;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TE_KM7Q2Eeaa7p8tp3-_vA" name="setPosition" specification="_TE-jILQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    // ensure that the values don't change while the odometer is running
    synchronized (mutex) {
        if (update[0])
            x = position[0];
        if (update[1])
            y = position[1];
        if (update[2])
            theta = position[2];
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TE_xQrQ2Eeaa7p8tp3-_vA" name="setX" specification="_TE_xQLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    synchronized (mutex) {
        this.x = x;
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFA_YLQ2Eeaa7p8tp3-_vA" name="setY" specification="_TFAYULQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    synchronized (mutex) {
        this.y = y;
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFBmcLQ2Eeaa7p8tp3-_vA" name="setTheta" specification="_TFA_YbQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    synchronized (mutex) {
        this.theta = theta;
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFC0kbQ2Eeaa7p8tp3-_vA" name="getLeftMotorTachoCount" specification="_TFCNgLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    return leftMotorTachoCount;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFECsLQ2Eeaa7p8tp3-_vA" name="setLeftMotorTachoCount" specification="_TFDboLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    synchronized (mutex) {
        this.leftMotorTachoCount = leftMotorTachoCount;
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFF34LQ2Eeaa7p8tp3-_vA" name="getRightMotorTachoCount" specification="_TFFQ0LQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    return rightMotorTachoCount;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFGe8rQ2Eeaa7p8tp3-_vA" name="setRightMotorTachoCount" specification="_TFGe8LQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    synchronized (mutex) {
        this.rightMotorTachoCount = rightMotorTachoCount;
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFHGArQ2Eeaa7p8tp3-_vA" name="getFilteredData" specification="_TFHGALQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    return data;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFHtErQ2Eeaa7p8tp3-_vA" name="setData" specification="_TFHtELQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    this.data = data;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFJiQ7Q2Eeaa7p8tp3-_vA" name="euclideanDistance" specification="_TFHtE7Q2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    return Math.sqrt((a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]));
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFKJUbQ2Eeaa7p8tp3-_vA" name="turnTo" specification="_TFJiRLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    if (Math.abs(theta - getTheta()) > Util.DEG_TOLERANCE) {
        double adjustment = theta - getTheta();
        if (Math.abs(adjustment) > Math.PI)
            adjustment -= Math.PI * 2;
        if (!(Math.abs(theta - getTheta()) &lt; Math.PI)) {
            if (theta - getTheta() &lt; 0.0)
                theta = theta + Math.PI;
            else
                theta = theta - Math.PI;
        }
        turnBy(adjustment);
    //Sound.beep();
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFKwYLQ2Eeaa7p8tp3-_vA" name="turnBy" specification="_TFKJUrQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    setMotorSpeeds(ROTATE_SPEED, ROTATE_SPEED);
    leftMotor.rotate(convertAngle(Util.WHEEL_RADIUS, Util.TRACK, theta * 180.0 / Math.PI), true);
    rightMotor.rotate(-convertAngle(Util.WHEEL_RADIUS, Util.TRACK, theta * 180.0 / Math.PI), false);
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFKwZLQ2Eeaa7p8tp3-_vA" name="travelTo" specification="_TFKwYbQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    while (euclideanDistance(new double[] { x, y }, new double[] { getX(), getY() }) > Util.CM_TOLERANCE) {
        double dx = x - getX();
        double dy = y - getY();
        double theta = Math.atan2(dy, dx);
        turnTo(theta);
        leftMotor.setSpeed(NAVIGATE_SPEED);
        rightMotor.setSpeed(NAVIGATE_SPEED);
        leftMotor.forward();
        rightMotor.forward();
    }
    rightMotor.stop();
    leftMotor.stop();
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFLXdLQ2Eeaa7p8tp3-_vA" name="convertDistance" specification="_TFLXcLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    return (int) (distance * 180.0 / (Math.PI * radius));
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFNzsbQ2Eeaa7p8tp3-_vA" name="convertAngle" specification="_TFL-gLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    return convertDistance(radius, Math.PI * width * angle / 360.0);
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TErBIbQ2Eeaa7p8tp3-_vA" name="Odometer" visibility="public" method="_TEvSkLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TEuEcLQ2Eeaa7p8tp3-_vA" name="leftMotor" type="_-hvIkrQ1Eeaa7p8tp3-_vA"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TEurgLQ2Eeaa7p8tp3-_vA" name="rightMotor" type="_-hvIkrQ1Eeaa7p8tp3-_vA"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TEwgsLQ2Eeaa7p8tp3-_vA" name="run" visibility="public" method="_TEwgsbQ2Eeaa7p8tp3-_vA"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TExHwLQ2Eeaa7p8tp3-_vA" name="getMotors" visibility="public" method="_TExu07Q2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TExu0LQ2Eeaa7p8tp3-_vA" type="_-hvIkrQ1Eeaa7p8tp3-_vA" direction="return">
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TExu0bQ2Eeaa7p8tp3-_vA"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TExu0rQ2Eeaa7p8tp3-_vA" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TEyV4LQ2Eeaa7p8tp3-_vA" name="setMotorSpeeds" visibility="public" method="_TEyV47Q2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TEyV4bQ2Eeaa7p8tp3-_vA" name="speedL">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TEyV4rQ2Eeaa7p8tp3-_vA" name="speedR">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TEyV5LQ2Eeaa7p8tp3-_vA" name="setMotorSpeed" visibility="public" method="_TEy88bQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TEy88LQ2Eeaa7p8tp3-_vA" name="speed">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TEy88rQ2Eeaa7p8tp3-_vA" name="forwardMotors" visibility="public" method="_TEy887Q2Eeaa7p8tp3-_vA"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TEy89LQ2Eeaa7p8tp3-_vA" name="backwardMotors" visibility="public" method="_TEy89bQ2Eeaa7p8tp3-_vA"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TE1ZMLQ2Eeaa7p8tp3-_vA" name="spin" visibility="public" method="_TE1ZMrQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TE1ZMbQ2Eeaa7p8tp3-_vA" name="dir"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TE2AQLQ2Eeaa7p8tp3-_vA" name="stopMotors" visibility="public" method="_TE2AQbQ2Eeaa7p8tp3-_vA"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TE3OYbQ2Eeaa7p8tp3-_vA" name="moveCM" visibility="public" method="_TE31cbQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TE3OYrQ2Eeaa7p8tp3-_vA" name="dir"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TE3OY7Q2Eeaa7p8tp3-_vA" name="distance">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TE31cLQ2Eeaa7p8tp3-_vA" name="stop">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TE5DkLQ2Eeaa7p8tp3-_vA" name="getPosition" visibility="public" method="_TE64wbQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TE5qoLQ2Eeaa7p8tp3-_vA" name="position">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TE5qobQ2Eeaa7p8tp3-_vA"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TE6RsLQ2Eeaa7p8tp3-_vA" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TE6RsbQ2Eeaa7p8tp3-_vA" name="update">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TE6RsrQ2Eeaa7p8tp3-_vA"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TE64wLQ2Eeaa7p8tp3-_vA" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TE7f0LQ2Eeaa7p8tp3-_vA" name="getPosition" visibility="public" method="_TE8t8bQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TE8G4LQ2Eeaa7p8tp3-_vA" name="position">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TE8G4bQ2Eeaa7p8tp3-_vA"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TE8t8LQ2Eeaa7p8tp3-_vA" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TE8t8rQ2Eeaa7p8tp3-_vA" name="getX" visibility="public" method="_TE9VAbQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TE9VALQ2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TE9VArQ2Eeaa7p8tp3-_vA" name="getY" visibility="public" method="_TE98EbQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TE98ELQ2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TE98ErQ2Eeaa7p8tp3-_vA" name="getTheta" visibility="public" method="_TE98FLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TE98E7Q2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TE-jILQ2Eeaa7p8tp3-_vA" name="setPosition" visibility="public" method="_TE_KM7Q2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TE-jIbQ2Eeaa7p8tp3-_vA" name="position">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TE-jIrQ2Eeaa7p8tp3-_vA"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TE-jI7Q2Eeaa7p8tp3-_vA" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TE_KMLQ2Eeaa7p8tp3-_vA" name="update">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TE_KMbQ2Eeaa7p8tp3-_vA"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TE_KMrQ2Eeaa7p8tp3-_vA" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TE_xQLQ2Eeaa7p8tp3-_vA" name="setX" visibility="public" method="_TE_xQrQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TE_xQbQ2Eeaa7p8tp3-_vA" name="x">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFAYULQ2Eeaa7p8tp3-_vA" name="setY" visibility="public" method="_TFA_YLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFAYUbQ2Eeaa7p8tp3-_vA" name="y">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFA_YbQ2Eeaa7p8tp3-_vA" name="setTheta" visibility="public" method="_TFBmcLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFA_YrQ2Eeaa7p8tp3-_vA" name="theta">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFCNgLQ2Eeaa7p8tp3-_vA" name="getLeftMotorTachoCount" visibility="public" method="_TFC0kbQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFC0kLQ2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFDboLQ2Eeaa7p8tp3-_vA" name="setLeftMotorTachoCount" visibility="public" method="_TFECsLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFDbobQ2Eeaa7p8tp3-_vA" name="leftMotorTachoCount">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFFQ0LQ2Eeaa7p8tp3-_vA" name="getRightMotorTachoCount" visibility="public" method="_TFF34LQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFFQ0bQ2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFGe8LQ2Eeaa7p8tp3-_vA" name="setRightMotorTachoCount" visibility="public" method="_TFGe8rQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFGe8bQ2Eeaa7p8tp3-_vA" name="rightMotorTachoCount">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFHGALQ2Eeaa7p8tp3-_vA" name="getFilteredData" visibility="public" method="_TFHGArQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFHGAbQ2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFHtELQ2Eeaa7p8tp3-_vA" name="setData" visibility="public" method="_TFHtErQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFHtEbQ2Eeaa7p8tp3-_vA" name="data">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFHtE7Q2Eeaa7p8tp3-_vA" name="euclideanDistance" visibility="public" isStatic="true" method="_TFJiQ7Q2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFIUILQ2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFI7MLQ2Eeaa7p8tp3-_vA" name="a">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TFI7MbQ2Eeaa7p8tp3-_vA"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TFI7MrQ2Eeaa7p8tp3-_vA" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFJiQLQ2Eeaa7p8tp3-_vA" name="b">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TFJiQbQ2Eeaa7p8tp3-_vA"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TFJiQrQ2Eeaa7p8tp3-_vA" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFJiRLQ2Eeaa7p8tp3-_vA" name="turnTo" visibility="public" method="_TFKJUbQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFKJULQ2Eeaa7p8tp3-_vA" name="theta">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFKJUrQ2Eeaa7p8tp3-_vA" name="turnBy" visibility="public" method="_TFKwYLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFKJU7Q2Eeaa7p8tp3-_vA" name="theta">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFKwYbQ2Eeaa7p8tp3-_vA" name="travelTo" visibility="public" method="_TFKwZLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFKwYrQ2Eeaa7p8tp3-_vA" name="x">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFKwY7Q2Eeaa7p8tp3-_vA" name="y">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFLXcLQ2Eeaa7p8tp3-_vA" name="convertDistance" visibility="private" method="_TFLXdLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFLXcbQ2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFLXcrQ2Eeaa7p8tp3-_vA" name="radius">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFLXc7Q2Eeaa7p8tp3-_vA" name="distance">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFL-gLQ2Eeaa7p8tp3-_vA" name="convertAngle" visibility="private" method="_TFNzsbQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFL-gbQ2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFMlkLQ2Eeaa7p8tp3-_vA" name="radius">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFNMoLQ2Eeaa7p8tp3-_vA" name="width">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFNzsLQ2Eeaa7p8tp3-_vA" name="angle">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <nestedClassifier xmi:type="uml:Enumeration" xmi:id="_TEmIobQ2Eeaa7p8tp3-_vA" name="TURNDIR" visibility="public">
            <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TEmvsLQ2Eeaa7p8tp3-_vA" name="CW"/>
            <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TEmvsbQ2Eeaa7p8tp3-_vA" name="CCW"/>
          </nestedClassifier>
          <nestedClassifier xmi:type="uml:Enumeration" xmi:id="_TEmvsrQ2Eeaa7p8tp3-_vA" name="LINEDIR" visibility="public">
            <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TEmvs7Q2Eeaa7p8tp3-_vA" name="Forward"/>
            <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TEnWwLQ2Eeaa7p8tp3-_vA" name="Backward"/>
          </nestedClassifier>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_TCG1ULQ2Eeaa7p8tp3-_vA" name="Avoider" visibility="public">
          <generalization xmi:type="uml:Generalization" xmi:id="_TCHcYLQ2Eeaa7p8tp3-_vA" general="_-rxOUbQ1Eeaa7p8tp3-_vA"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TCHcYbQ2Eeaa7p8tp3-_vA" name="odo" visibility="private" type="_TBslobQ2Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TCIDcbQ2Eeaa7p8tp3-_vA" name="nav" visibility="private" type="_TCIDcLQ2Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TCIqgLQ2Eeaa7p8tp3-_vA" name="usSensor" visibility="private" isUnique="false">
            <type xmi:type="uml:Class" href="chassis.uml#_S4b78LQ2Eeaa7p8tp3-_vA"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TCIqgbQ2Eeaa7p8tp3-_vA" name="currPos" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TCJRkLQ2Eeaa7p8tp3-_vA"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TCJ4oLQ2Eeaa7p8tp3-_vA" value="*"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TCJ4obQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>new double[3]</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TCKfsLQ2Eeaa7p8tp3-_vA" name="RED" visibility="private" type="_-r0Ro7Q1Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TCLGwLQ2Eeaa7p8tp3-_vA" name="RED_N" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TCLGwbQ2Eeaa7p8tp3-_vA" name="RED_S" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TCLt0LQ2Eeaa7p8tp3-_vA" name="RED_W" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TCLt0bQ2Eeaa7p8tp3-_vA" name="RED_E" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TCLt0rQ2Eeaa7p8tp3-_vA" name="red_cardinals" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TCLt07Q2Eeaa7p8tp3-_vA"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TCMU4LQ2Eeaa7p8tp3-_vA" value="*"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TCMU4bQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>new double[4]</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TCMU4rQ2Eeaa7p8tp3-_vA" name="currRect" visibility="private" type="_-r0Ro7Q1Eeaa7p8tp3-_vA" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TCMU47Q2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>new Rectangle()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TCM78LQ2Eeaa7p8tp3-_vA" name="x1" visibility="private" isLeaf="true" type="_-r0Ro7Q1Eeaa7p8tp3-_vA" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TCM78bQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>new Rectangle(-5, -5, 10, 10)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TCM78rQ2Eeaa7p8tp3-_vA" name="x2" visibility="private" isLeaf="true" type="_-r0Ro7Q1Eeaa7p8tp3-_vA" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TCM787Q2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>new Rectangle(300, -5, 10, 10)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TCNjALQ2Eeaa7p8tp3-_vA" name="x3" visibility="private" isLeaf="true" type="_-r0Ro7Q1Eeaa7p8tp3-_vA" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TCNjAbQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>new Rectangle(300, 300, 10, 10)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TCNjArQ2Eeaa7p8tp3-_vA" name="x4" visibility="private" isLeaf="true" type="_-r0Ro7Q1Eeaa7p8tp3-_vA" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TCOKELQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>new Rectangle(-5, 300, 10, 10)</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TCR0cLQ2Eeaa7p8tp3-_vA" name="avoidState" visibility="public" isStatic="true" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TCR0cbQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>AvoidState.Disabled</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TCR0crQ2Eeaa7p8tp3-_vA" name="distance" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TCWs8LQ2Eeaa7p8tp3-_vA" name="Avoider" specification="_TCSbgLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    this.odo = odo;
    this.nav = nav;
    this.usSensor = usSensor;
    // X, Y axis which mark the borders of the RED zone
    this.RED_N = RED[1][1];
    this.RED_S = RED[0][1];
    this.RED_W = RED[0][0];
    this.RED_E = RED[1][0];
    this.red_cardinals = new double[] { RED_N, RED_W, RED_S, RED_E };
    int red_width = (int) (this.RED_E - this.RED_W);
    int red_height = (int) (this.RED_N - this.RED_S);
    // RED awt.rectangle
    this.RED = new Rectangle((int) (this.RED_W * 40), (int) (this.RED_N * 40), red_width * 40, red_height * 40);
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TCX7ELQ2Eeaa7p8tp3-_vA" name="run" specification="_TCXUALQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    while (true) {
        //Save the last states of Capture and Search, so we can set them to Idle temporarily during Avoider operation
        CaptureState lastCaptureState = Capture.captureState;
        SearchState lastSearchState = Search.searchState;
        //Current observed distance to an object
        distance = usSensor.getMedianSample(Util.US_SAMPLES);
        // build current position rectangle
        odo.getPosition(this.currPos);
        currRect.setBounds((int) (currPos[0] * Util.SQUARE_LENGTH), (int) (currPos[1] * Util.SQUARE_LENGTH), Util.ROBOT_WIDTH, Util.ROBOT_LENGTH);
        //Chooses if it is more appropriate to turn CCW or CW
        boolean CCW = chooseOrientation(currPos);
        if (Avoider.avoidState == AvoidState.Enabled) {
            if (Main.state != RobotState.Finished)
                Main.state = RobotState.Avoiding;
            odo.stopMotors();
            do {
                linearAvoidance(CCW);
            } while (usSensor.getMedianSample(Util.US_SAMPLES) &lt; Util.AVOID_DISTANCE);
            //check to make sure wheels won't swipe the obstacle
            double initialHeading = odo.getTheta();
            //distance robot avoids to and distance from CoR to outer bound
            double absoluteTurnAngle = initialHeading - Math.atan2(Util.AVOID_DISTANCE, Util.ROBOT_WIDTH / 2);
            boolean pathClear = true;
            odo.setMotorSpeed(USLocalizer.ROTATION_SPEED);
            //spin in direction opposite of linearAvoidance
            odo.spin(CCW ? Odometer.TURNDIR.CW : Odometer.TURNDIR.CCW);
            while (Math.abs(odo.getTheta() - absoluteTurnAngle) > Util.DEG_TOLERANCE) {
                if (usSensor.getMedianSample(Util.US_SAMPLES) &lt; Util.AVOID_DISTANCE)
                    pathClear = false;
            }
            odo.stopMotors();
            nav.turnTo(initialHeading, true);
            if (pathClear) {
                // no more obstacle ahead, advance a bit before returning control to Search
                odo.moveCM(LINEDIR.Forward, Util.ROBOT_LENGTH, true);
                if (Main.state != RobotState.Finished) {
                    if (lastCaptureState != CaptureState.Idle)
                        Main.state = RobotState.Capture;
                    else
                        Main.state = RobotState.Search;
                    Capture.captureState = lastCaptureState;
                    Search.searchState = lastSearchState;
                    avoidState = AvoidState.Disabled;
                }
            }
        }
        // check for RED zone
        if (RED.contains(currRect)) {
            odo.stopMotors();
            if (Main.state != RobotState.Finished) {
                Main.state = RobotState.Avoiding;
                // determine in which thread the robot was acting 
                if (Capture.captureState != CaptureState.Idle) {
                    Capture.captureState = CaptureState.Idle;
                } else {
                    Search.searchState = SearchState.Idle;
                }
            }
            redAvoidance();
        }
        // check for corners zones
        if (Main.state != RobotState.Finished &amp;&amp; Search.searchState != SearchState.Default &amp;&amp; (x1.contains(currRect) || x2.contains(currRect) || x3.contains(currRect) || x4.contains(currRect))) {
            // return to GREEN, nothing to do in a corner
            Search.searchState = SearchState.Default;
            Main.state = RobotState.Search;
            Capture.captureState = CaptureState.Idle;
            continue;
        }
        if (Main.state != RobotState.Finished) {
            //Reset Search and Capture to appropriate states
            if (lastCaptureState != CaptureState.Idle) {
                Main.state = RobotState.Capture;
                Capture.captureState = lastCaptureState;
            } else {
                Main.state = RobotState.Search;
                Search.searchState = lastSearchState;
            }
        }
        // lower stress on CPU
        try {
            Thread.sleep(Util.SLEEP_PERIOD);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TCYiILQ2Eeaa7p8tp3-_vA" name="redAvoidance" specification="_TCX7EbQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    double currX = this.currPos[0];
    double currY = this.currPos[1];
    int currCardinal = 0;
    double distanceToNextAxis = 0;
    // identify which side of RED zone we are facing
    if (currY &lt; this.RED_N + 5 &amp;&amp; currY > this.RED_N - 5) {
        currCardinal = 0;
    } else if (currX &lt; this.RED_W + 5 &amp;&amp; currX > this.RED_W - 5) {
        currCardinal = 1;
    } else if (currY &lt; this.RED_S + 5 &amp;&amp; currX > this.RED_S - 5) {
        currCardinal = 2;
    } else if (currX &lt; this.RED_E + 5 &amp;&amp; currX > this.RED_E - 5) {
        currCardinal = 3;
    }
    // go around it (by default CCW)
    for (int i = 0; i &lt; 1; i++) {
        currCardinal++;
        currCardinal %= 4;
        nav.turnTo(currCardinal * Math.PI / 2 + Math.PI / 2, true);
        distanceToNextAxis = (currCardinal % 2 == 0) ? Math.abs(currY - red_cardinals[currCardinal]) : Math.abs(currX - red_cardinals[currCardinal]);
        odo.moveCM(LINEDIR.Forward, distanceToNextAxis, true);
    }
// at this position the robot is on the opposite end of the RED rectangle, 
// it can safely continue its path
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TCZJM7Q2Eeaa7p8tp3-_vA" name="chooseOrientation" specification="_TCYiIbQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    double currX = currPos[0];
    double currY = currPos[1];
    double currT = currPos[2];
    if (currT &lt; 0.0)
        currT += 2 * Math.PI;
    else if (currT > 2 * Math.PI)
        currT -= 2 * Math.PI;
    if (currT > Math.PI / 4 &amp;&amp; currT &lt; 3 * Math.PI / 4) {
        if (currX > 8 * Util.SQUARE_LENGTH)
            return true;
    } else if (currT > 5 * Math.PI / 4 &amp;&amp; currT &lt; 7 * Math.PI / 4) {
        if (currX &lt; 2 * Util.SQUARE_LENGTH)
            return true;
    } else if (currT > 3 * Math.PI / 4 &amp;&amp; currT &lt; 5 * Math.PI / 4) {
        if (currY > 8 * Util.SQUARE_LENGTH)
            return true;
    } else if (currT > 7 * Math.PI / 4 || currT &lt; Math.PI / 4) {
        if (currY &lt; 2 * Util.SQUARE_LENGTH)
            return true;
    }
    return false;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TCZwQrQ2Eeaa7p8tp3-_vA" name="linearAvoidance" specification="_TCZwQLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    int coeff = (CCW) ? -1 : 1;
    nav.turnBy(coeff * Math.PI / 2);
    nav.travelTo(odo.getX() + Math.cos(odo.getTheta()) * (Util.WOOD_MIN_WIDTH + Util.TRACK), odo.getY() + Math.sin(odo.getTheta()) * (Util.WOOD_MIN_WIDTH + Util.TRACK), false);
    double[] pos = new double[3];
    odo.getPosition(pos);
    //Recursively avoid obstacles if there's an obstacle in the avoidance path
    if (Navigation.PathBlocked)
        linearAvoidance(CCW);
    nav.turnBy(-1 * coeff * Math.PI / 2);
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TCSbgLQ2Eeaa7p8tp3-_vA" name="Avoider" visibility="public" method="_TCWs8LQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCVe0LQ2Eeaa7p8tp3-_vA" name="odo" type="_TBslobQ2Eeaa7p8tp3-_vA"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCWF4LQ2Eeaa7p8tp3-_vA" name="nav" type="_TCIDcLQ2Eeaa7p8tp3-_vA"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCWF4bQ2Eeaa7p8tp3-_vA" name="usSensor">
              <type xmi:type="uml:Class" href="chassis.uml#_S4b78LQ2Eeaa7p8tp3-_vA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCWF4rQ2Eeaa7p8tp3-_vA" name="RED">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TCWF47Q2Eeaa7p8tp3-_vA"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TCWF5LQ2Eeaa7p8tp3-_vA" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TCXUALQ2Eeaa7p8tp3-_vA" name="run" visibility="public" method="_TCX7ELQ2Eeaa7p8tp3-_vA"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TCX7EbQ2Eeaa7p8tp3-_vA" name="redAvoidance" visibility="private" method="_TCYiILQ2Eeaa7p8tp3-_vA"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TCYiIbQ2Eeaa7p8tp3-_vA" name="chooseOrientation" visibility="private" method="_TCZJM7Q2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCYiIrQ2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCZJMLQ2Eeaa7p8tp3-_vA" name="currPos">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TCZJMbQ2Eeaa7p8tp3-_vA"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TCZJMrQ2Eeaa7p8tp3-_vA" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TCZwQLQ2Eeaa7p8tp3-_vA" name="linearAvoidance" visibility="private" method="_TCZwQrQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCZwQbQ2Eeaa7p8tp3-_vA" name="CCW">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <nestedClassifier xmi:type="uml:Enumeration" xmi:id="_TCOKEbQ2Eeaa7p8tp3-_vA" name="AvoidState" visibility="public">
            <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TCOKErQ2Eeaa7p8tp3-_vA" name="Disabled"/>
            <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TCOKE7Q2Eeaa7p8tp3-_vA" name="Enabled"/>
          </nestedClassifier>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_TCIDcLQ2Eeaa7p8tp3-_vA" name="Navigation" visibility="public">
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TCfP0LQ2Eeaa7p8tp3-_vA" name="odometer" visibility="private" type="_TBslobQ2Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TCgd8LQ2Eeaa7p8tp3-_vA" name="leftMotor" visibility="private" type="_-hvIkrQ1Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TChFALQ2Eeaa7p8tp3-_vA" name="rightMotor" visibility="private" type="_-hvIkrQ1Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TChsELQ2Eeaa7p8tp3-_vA" name="PathBlocked" visibility="public" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TChsEbQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>false</body>
            </defaultValue>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TClWcbQ2Eeaa7p8tp3-_vA" name="Navigation" specification="_TChsErQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    this.odometer = odometer;
    EV3LargeRegulatedMotor[] motors = this.odometer.getMotors();
    this.leftMotor = motors[0];
    this.rightMotor = motors[1];
    // set acceleration
    this.leftMotor.setAcceleration(Util.NAV_ACCELERATION);
    this.rightMotor.setAcceleration(Util.NAV_ACCELERATION);
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TCmkkbQ2Eeaa7p8tp3-_vA" name="setSpeeds" specification="_TCl9gLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    this.leftMotor.setSpeed(lSpd);
    this.rightMotor.setSpeed(rSpd);
    if (lSpd &lt; 0)
        this.leftMotor.backward();
    else
        this.leftMotor.forward();
    if (rSpd &lt; 0)
        this.rightMotor.backward();
    else
        this.rightMotor.forward();
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TCnLobQ2Eeaa7p8tp3-_vA" name="setFloat" specification="_TCnLoLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    this.leftMotor.stop();
    this.rightMotor.stop();
    this.leftMotor.flt(true);
    this.rightMotor.flt(true);
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TCqO8bQ2Eeaa7p8tp3-_vA" name="travelTo" specification="_TCpn4LQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    Navigation.PathBlocked = false;
    double minAng;
    minAng = (Math.atan2(y - odometer.getY(), x - odometer.getX()));
    double error = minAng - this.odometer.getTheta();
    if (error > Math.PI)
        error -= 2 * Math.PI;
    else if (error &lt; -Math.PI)
        error += 2 * Math.PI;
    turnBy(-error);
    double distance;
    while ((distance = Odometer.euclideanDistance(new double[] { odometer.getX(), odometer.getY() }, new double[] { x, y })) > Util.CM_TOLERANCE) {
        minAng = (Math.atan2(y - odometer.getY(), x - odometer.getX()));
        //if(minAng > DEG_ERR*Math.PI/180) this.turnBy(minAng);
        if (distance > 3 * Util.CM_TOLERANCE)
            this.turnTo(minAng, false);
        this.setSpeeds(Util.MOTOR_FAST, Util.MOTOR_FAST);
        if (Main.usSensor.getFilteredDataBasic() &lt; Util.AVOID_DISTANCE) {
            Navigation.PathBlocked = true;
            Sound.beepSequence();
            break;
        }
    }
    this.setSpeeds(0, 0);
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TCsEILQ2Eeaa7p8tp3-_vA" name="travelTo" specification="_TCqO8rQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    Navigation.PathBlocked = false;
    double minAng;
    minAng = (Math.atan2(y - odometer.getY(), x - odometer.getX()));
    double error = minAng - this.odometer.getTheta();
    if (error > Math.PI)
        error -= 2 * Math.PI;
    else if (error &lt; -Math.PI)
        error += 2 * Math.PI;
    turnBy(-error);
    double distance;
    double[] lastPos = new double[] { odometer.getX(), odometer.getY() };
    while ((distance = Odometer.euclideanDistance(new double[] { odometer.getX(), odometer.getY() }, new double[] { x, y })) > Util.CM_TOLERANCE) {
        minAng = (Math.atan2(y - odometer.getY(), x - odometer.getX()));
        //if(minAng > DEG_ERR*Math.PI/180) this.turnBy(minAng);
        if (distance > 3 * Util.CM_TOLERANCE)
            this.turnTo(minAng, false);
        this.setSpeeds(Util.MOTOR_FAST, Util.MOTOR_FAST);
        if (Main.usSensor.getFilteredDataBasic() &lt; Util.AVOID_DISTANCE) {
            Navigation.PathBlocked = true;
            Sound.beepSequence();
            break;
        }
        if (//check fov
        checkSides &amp;&amp; Odometer.euclideanDistance(new double[] { odometer.getX(), odometer.getY() }, lastPos) > Util.TRAVELTO_BW) {
            this.setSpeeds(0, 0);
            lastPos = new double[] { odometer.getX(), odometer.getY() };
            double currentHeading = odometer.getTheta();
            //always use avoid distance or travelto bandwidth - larger of the two
            double relativeAngle = Math.atan2(Util.AVOID_DISTANCE > Util.TRAVELTO_BW ? Util.AVOID_DISTANCE : Util.TRAVELTO_BW, Util.ROBOT_WIDTH / 2);
            odometer.setMotorSpeed(USLocalizer.ROTATION_SPEED);
            //total field of view to rotate through is 2*relativeAngle
            this.turnTo(currentHeading + relativeAngle, true);
            odometer.spin(TURNDIR.CW);
            while (Math.abs(odometer.getTheta() - (currentHeading - relativeAngle)) > Util.DEG_TOLERANCE) {
                if (Main.usSensor.getFilteredDataBasic() &lt; Util.AVOID_DISTANCE) {
                    this.setSpeeds(0, 0);
                    Navigation.PathBlocked = true;
                    Sound.beepSequence();
                    return;
                }
            }
            this.setSpeeds(0, 0);
        }
    }
    this.setSpeeds(0, 0);
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TCtSQLQ2Eeaa7p8tp3-_vA" name="turnTo" specification="_TCsrMLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    double error = angle - this.odometer.getTheta();
    if (error > Math.PI)
        error -= 2 * Math.PI;
    else if (error &lt; -Math.PI)
        error += 2 * Math.PI;
    while (Math.abs(error) > Util.DEG_TOLERANCE * Math.PI / 180.0) {
        error = angle - this.odometer.getTheta();
        if ((Math.abs(error)) > Math.PI) {
            if (error &lt; 0)
                error += 2 * Math.PI;
            else
                error -= 2 * Math.PI;
        }
        if (error &lt; -Math.PI) {
            this.setSpeeds(-Util.MOTOR_SLOW, Util.MOTOR_SLOW);
        //odometer.getMotors()[0].forward();
        //odometer.getMotors()[1].backward();
        } else if (error &lt; 0.0) {
            this.setSpeeds(Util.MOTOR_SLOW, -Util.MOTOR_SLOW);
        //odometer.getMotors()[0].backward();
        //odometer.getMotors()[1].forward();
        } else if (error > Math.PI) {
            this.setSpeeds(Util.MOTOR_SLOW, -Util.MOTOR_SLOW);
        //odometer.getMotors()[0].backward();
        //odometer.getMotors()[1].forward();
        } else {
            this.setSpeeds(-Util.MOTOR_SLOW, Util.MOTOR_SLOW);
        //odometer.getMotors()[0].forward();
        //odometer.getMotors()[1].backward();
        }
    }
    if (stop) {
        this.setSpeeds(0, 0);
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TCt5ULQ2Eeaa7p8tp3-_vA" name="turnBy" specification="_TCtSQbQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    odometer.setMotorSpeeds(Odometer.ROTATE_SPEED, Odometer.ROTATE_SPEED);
    odometer.getMotors()[0].rotate(convertAngle(Util.WHEEL_RADIUS, Util.TRACK, theta * 180.0 / Math.PI), true);
    odometer.getMotors()[1].rotate(-convertAngle(Util.WHEEL_RADIUS, Util.TRACK, theta * 180.0 / Math.PI), false);
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TCugYrQ2Eeaa7p8tp3-_vA" name="convertDistance" specification="_TCt5UbQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    return (int) (distance * 180.0 / (Math.PI * radius));
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TCvugLQ2Eeaa7p8tp3-_vA" name="convertAngle" specification="_TCugY7Q2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    return convertDistance(radius, Math.PI * width * angle / 360.0);
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TCyKwLQ2Eeaa7p8tp3-_vA" name="minimalAngle" specification="_TCwVkLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    double dTheta = theta1 - theta2;
    if (dTheta > Math.PI)
        dTheta -= 2 * Math.PI;
    else if (dTheta &lt; -Math.PI)
        dTheta += 2 * Math.PI;
    return dTheta;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TC0nALQ2Eeaa7p8tp3-_vA" name="goForward" specification="_TCyx0LQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    this.travelTo(Math.cos(Math.toRadians(this.odometer.getTheta())) * distance, Math.cos(Math.toRadians(this.odometer.getTheta())) * distance);
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TChsErQ2Eeaa7p8tp3-_vA" name="Navigation" visibility="public" method="_TClWcbQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TClWcLQ2Eeaa7p8tp3-_vA" name="odometer" type="_TBslobQ2Eeaa7p8tp3-_vA"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TCl9gLQ2Eeaa7p8tp3-_vA" name="setSpeeds" visibility="public" method="_TCmkkbQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCl9gbQ2Eeaa7p8tp3-_vA" name="lSpd">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCmkkLQ2Eeaa7p8tp3-_vA" name="rSpd">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TCnLoLQ2Eeaa7p8tp3-_vA" name="setFloat" visibility="public" method="_TCnLobQ2Eeaa7p8tp3-_vA"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TCpn4LQ2Eeaa7p8tp3-_vA" name="travelTo" visibility="public" method="_TCqO8bQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCpn4bQ2Eeaa7p8tp3-_vA" name="x">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCqO8LQ2Eeaa7p8tp3-_vA" name="y">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TCqO8rQ2Eeaa7p8tp3-_vA" name="travelTo" visibility="public" method="_TCsEILQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCq2ALQ2Eeaa7p8tp3-_vA" name="x">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCq2AbQ2Eeaa7p8tp3-_vA" name="y">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCrdELQ2Eeaa7p8tp3-_vA" name="checkSides">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TCsrMLQ2Eeaa7p8tp3-_vA" name="turnTo" visibility="public" method="_TCtSQLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCsrMbQ2Eeaa7p8tp3-_vA" name="angle">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCsrMrQ2Eeaa7p8tp3-_vA" name="stop">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TCtSQbQ2Eeaa7p8tp3-_vA" name="turnBy" visibility="public" method="_TCt5ULQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCtSQrQ2Eeaa7p8tp3-_vA" name="theta">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TCt5UbQ2Eeaa7p8tp3-_vA" name="convertDistance" visibility="private" isStatic="true" method="_TCugYrQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCt5UrQ2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCugYLQ2Eeaa7p8tp3-_vA" name="radius">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCugYbQ2Eeaa7p8tp3-_vA" name="distance">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TCugY7Q2Eeaa7p8tp3-_vA" name="convertAngle" visibility="private" isStatic="true" method="_TCvugLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCvHcLQ2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCvHcbQ2Eeaa7p8tp3-_vA" name="radius">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCvHcrQ2Eeaa7p8tp3-_vA" name="width">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCvHc7Q2Eeaa7p8tp3-_vA" name="angle">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TCwVkLQ2Eeaa7p8tp3-_vA" name="minimalAngle" visibility="public" isStatic="true" method="_TCyKwLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCw8oLQ2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCw8obQ2Eeaa7p8tp3-_vA" name="theta1">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCxjsLQ2Eeaa7p8tp3-_vA" name="theta2">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TCyx0LQ2Eeaa7p8tp3-_vA" name="goForward" visibility="public" method="_TC0nALQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TCzY4LQ2Eeaa7p8tp3-_vA" name="distance">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_TC6toLQ2Eeaa7p8tp3-_vA" name="Search" visibility="public">
          <generalization xmi:type="uml:Generalization" xmi:id="_TC6tobQ2Eeaa7p8tp3-_vA" general="_-rxOUbQ1Eeaa7p8tp3-_vA"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TC7UsLQ2Eeaa7p8tp3-_vA" name="odo" visibility="private" type="_TBslobQ2Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TC8i0LQ2Eeaa7p8tp3-_vA" name="nav" visibility="private" type="_TCIDcLQ2Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TC9J4LQ2Eeaa7p8tp3-_vA" name="usSensor" visibility="private" isUnique="false">
            <type xmi:type="uml:Class" href="chassis.uml#_S4b78LQ2Eeaa7p8tp3-_vA"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TC9w8LQ2Eeaa7p8tp3-_vA" name="colorSensor" visibility="private" isStatic="true" isUnique="false">
            <type xmi:type="uml:Class" href="chassis.uml#_S4BsQLQ2Eeaa7p8tp3-_vA"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TC-YALQ2Eeaa7p8tp3-_vA" name="N" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TC-YAbQ2Eeaa7p8tp3-_vA"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TC-YArQ2Eeaa7p8tp3-_vA" value="*"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TC-YA7Q2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>new double[2]</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TC-YBLQ2Eeaa7p8tp3-_vA" name="W" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TC-_ELQ2Eeaa7p8tp3-_vA"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TC-_EbQ2Eeaa7p8tp3-_vA" value="*"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TC-_ErQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>new double[2]</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TC-_E7Q2Eeaa7p8tp3-_vA" name="S" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TC-_FLQ2Eeaa7p8tp3-_vA"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TC_mILQ2Eeaa7p8tp3-_vA" value="*"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TC_mIbQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>new double[2]</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TC_mIrQ2Eeaa7p8tp3-_vA" name="E" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TC_mI7Q2Eeaa7p8tp3-_vA"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TC_mJLQ2Eeaa7p8tp3-_vA" value="*"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TDANMLQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>new double[2]</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDANMbQ2Eeaa7p8tp3-_vA" name="cardinals" visibility="public" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TDA0QLQ2Eeaa7p8tp3-_vA"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TDA0QbQ2Eeaa7p8tp3-_vA" value="*"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TDA0QrQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>new double[4][2]</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDBbULQ2Eeaa7p8tp3-_vA" name="currCardinal" visibility="public" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDBbUbQ2Eeaa7p8tp3-_vA" name="objectLocations" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_KgG0cPaLEeW5KOK8aDMdgA"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TDBbUrQ2Eeaa7p8tp3-_vA"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TDBbU7Q2Eeaa7p8tp3-_vA" value="*"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TDBbVLQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>new ArrayList&lt;double[]>()</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDCCYLQ2Eeaa7p8tp3-_vA" name="lastDistanceDetected" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDCCYbQ2Eeaa7p8tp3-_vA" name="lastX" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDCCYrQ2Eeaa7p8tp3-_vA" name="lastY" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDFswbQ2Eeaa7p8tp3-_vA" name="searchState" visibility="public" isStatic="true" isUnique="false"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDJ-MLQ2Eeaa7p8tp3-_vA" name="Search" specification="_TDFswrQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    this.odo = odometer;
    this.colorSensor = colorSensor;
    this.usSensor = usSensor;
    nav = new Navigation(odo);
    Search.searchState = SearchState.Default;
    // mid points of the GREEN box
    double midX = (GREEN[0][0] + GREEN[1][0]) / 2;
    double midY = (GREEN[0][1] + GREEN[1][1]) / 2;
    double diffX = GREEN[1][0] - GREEN[0][0];
    double diffY = GREEN[1][1] - GREEN[0][1];
    double paddingX = 0;
    double paddingY = 0;
    // make cardinal point further from the tower position
    if (diffX == diffY) {
        paddingX = Util.ROBOT_LENGTH / 2;
        paddingY = Util.ROBOT_LENGTH / 2;
    } else if (diffX > diffY) {
        paddingY = Util.ROBOT_LENGTH / 2;
    } else {
        paddingX = Util.ROBOT_LENGTH / 2;
    }
    // cardinal search points
    this.S = new double[] { midX, GREEN[0][1] - paddingY };
    this.N = new double[] { midX, GREEN[1][1] + paddingY };
    this.W = new double[] { GREEN[0][0] - paddingX, midY };
    this.E = new double[] { GREEN[1][0] + paddingX, midY };
    this.cardinals = new double[][] { N, W, S, E };
    this.lastDistanceDetected = -1;
    this.currCardinal = -1;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDKlQLQ2Eeaa7p8tp3-_vA" name="run" specification="_TDJ-MbQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    while (Main.state != Main.RobotState.Search) {
        //check if interrupted
        if (Thread.interrupted())
            return;
        //wait for localization to finish
        try {
            Thread.sleep(Util.SLEEP_PERIOD);
        } catch (Exception ex) {
        }
    }
    //Initialize rgb mode
    isStyrofoamBlock();
    while (true) {
        if (Main.state == RobotState.Avoiding)
            Search.searchState = SearchState.Idle;
        switch(searchState) {
            case Default:
                // at origin, not yet at GREEN zone
                if (currCardinal == -1) {
                    // next cardinal, wrap around
                    currCardinal++;
                    currCardinal %= 4;
                    // until it arrives at current cardinal
                    while (Odometer.euclideanDistance(new double[] { odo.getX(), odo.getY() }, new double[] { cardinals[currCardinal][0], cardinals[currCardinal][1] }) > Util.TRAVELTO_BW) {
                        double targetHeading = Math.atan2(cardinals[currCardinal][1] - odo.getY(), cardinals[currCardinal][0] - odo.getX());
                        odo.setMotorSpeed(USLocalizer.ROTATION_SPEED);
                        // will always be CW because localization will always end with the robot with the wall on its left
                        odo.spin(Odometer.TURNDIR.CW);
                        double minHeading = odo.getTheta();
                        double minDistance = Main.usSensor.getMedianSample(Util.US_SAMPLES);
                        double distance;
                        while (Math.abs(Navigation.minimalAngle(odo.getTheta(), targetHeading)) > Util.SCAN_THETA_THRESHOLD) {
                            if ((distance = Main.usSensor.getMedianSample(Util.US_SAMPLES)) &lt; minDistance) {
                                minDistance = distance;
                                minHeading = odo.getTheta();
                            }
                        }
                        odo.stopMotors();
                        //just to make sure we get the last heading
                        if ((distance = Main.usSensor.getMedianSample(Util.US_SAMPLES)) &lt; minDistance) {
                            minDistance = distance;
                            minHeading = odo.getTheta();
                        }
                        // if there's an approachable block in sight
                        if (minDistance &lt; Util.SEARCH_DISTANCE) {
                            Sound.twoBeeps();
                            nav.travelTo(minDistance * Math.cos(minHeading) + odo.getX(), minDistance * Math.sin(minHeading) + odo.getY());
                        } else
                            nav.travelTo(cardinals[currCardinal][0], cardinals[currCardinal][1]);
                        // verify if navigation was interrupted
                        if (Navigation.PathBlocked) {
                            // is the block a target or an obstacle?
                            if (testForStyrofoam()) {
                                searchState = SearchState.Idle;
                                Main.state = RobotState.Capture;
                                Capture.setContext(cardinals[currCardinal]);
                                Capture.captureState = CaptureState.Grab;
                                while (Main.state != RobotState.Search) {
                                    try {
                                        Thread.sleep(2 * Util.SLEEP_PERIOD);
                                    } catch (Exception ex) {
                                    }
                                }
                            //searchState = SearchState.Default;
                            } else {
                                Main.forklift.liftUp();
                                odo.moveCM(Odometer.LINEDIR.Backward, Util.BACKUP_DISTANCE, true);
                                Avoider.avoidState = AvoidState.Enabled;
                                //avoid race condition
                                try {
                                    Thread.sleep(2 * Util.SLEEP_PERIOD);
                                } catch (Exception ex) {
                                }
                                while (Main.state == RobotState.Avoiding) {
                                    try {
                                        Thread.sleep(Util.SLEEP_PERIOD);
                                    } catch (Exception ex) {
                                    }
                                }
                            //Avoider.avoidState = AvoidState.Disabled;
                            }
                        }
                    }
                    Search.searchState = SearchState.AtCardinal;
                } else {
                    // no more object at that cardinal point
                    if (this.objectLocations.isEmpty()) {
                        // next cardinal, wrap around
                        currCardinal++;
                        currCardinal %= 4;
                        Sound.beepSequence();
                        // linear set of instructions to reach next cardinal
                        // at this step the robot is ensured to be on the old cardinal point
                        // place on correct heading
                        nav.turnTo((Math.PI + (currCardinal - 1) * Math.PI / 2), true);
                        // travel until it reaches the axis of next cardinal point
                        travelToAxis(true);
                        // travel to the cardinal point without fear of bumping onto the tower
                        nav.travelTo(cardinals[currCardinal][0], cardinals[currCardinal][1]);
                        Search.searchState = SearchState.AtCardinal;
                    } else {
                        Search.searchState = SearchState.Inspecting;
                    }
                }
                Avoider.avoidState = AvoidState.Disabled;
                break;
            case AtCardinal:
                if (cardinals[currCardinal][0] &lt; 0.0 || cardinals[currCardinal][1] > 10.0 * Util.SQUARE_LENGTH || cardinals[currCardinal][1] &lt; 0.0 || cardinals[currCardinal][1] > 10.0 * Util.SQUARE_LENGTH) {
                    Search.searchState = SearchState.Default;
                    break;
                }
                // turn to start scanning angle
                double startAngle = Math.PI / 2 * currCardinal;
                nav.turnTo(startAngle, true);
                // reinitialize last distance 
                this.lastDistanceDetected = -1;
                // start scatter search
                odo.setMotorSpeed(Util.MOTOR_SLOW);
                odo.spin(TURNDIR.CCW);
                double targetAngle = startAngle + Math.PI;
                while (Math.abs(Navigation.minimalAngle(odo.getTheta(), targetAngle)) > Util.SCAN_THETA_THRESHOLD) {
                    testForObject();
                    // resume scatter search
                    odo.setMotorSpeed(Util.MOTOR_SLOW);
                    odo.spin(TURNDIR.CCW);
                }
                odo.stopMotors();
                // sort list of object locations
                Collections.sort(this.objectLocations, new Comparator&lt;double[]>() {

                    @Override
                    public int compare(double[] location1, double[] location2) {
                        if (location1[2] == location2[2]) {
                            return 0;
                        } else {
                            return location1[2] > location2[2] ? 1 : -1;
                        }
                    }
                });
                searchState = SearchState.Inspecting;
                break;
            case AtDropZone:
                // back off until  to avoid colliding with tower
                odo.moveCM(LINEDIR.Backward, Util.ROBOT_WIDTH / 2, true);
                nav.travelTo(cardinals[currCardinal][0], cardinals[currCardinal][1]);
                searchState = SearchState.Default;
                break;
            case Inspecting:
                if (!this.objectLocations.isEmpty()) {
                    // examine closest object
                    double X = this.objectLocations.get(0)[0];
                    double Y = this.objectLocations.get(0)[1];
                    // turn towards object
                    nav.turnTo(this.objectLocations.get(0)[3], true);
                    this.objectLocations.remove(0);
                    inspectObject(X, Y);
                    if (Main.state == RobotState.Capture)
                        continue;
                    Main.forklift.liftUp();
                } else {
                    searchState = SearchState.Default;
                }
                break;
            case Idle:
                // idle state, waiting for capture or avoider to return
                try {
                    Thread.sleep(Util.SLEEP_PERIOD);
                } catch (Exception ex) {
                }
                break;
        }
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDLMULQ2Eeaa7p8tp3-_vA" name="testForStyrofoam" specification="_TDKlQbQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    odo.setMotorSpeed(Util.MOTOR_SLOW);
    odo.forwardMotors();
    while (Main.usSensor.getMedianSample(Util.US_SAMPLES) > Util.BLOCK_DISTANCE) ;
    odo.stopMotors();
    Main.forklift.liftDown();
    boolean styrofoam = isStyrofoamBlock();
    return styrofoam;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDLMU7Q2Eeaa7p8tp3-_vA" name="testForObject" specification="_TDLMUbQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    // object detected
    odo.stopMotors();
    float currDistance = usSensor.getMedianSample(Util.US_SAMPLES);
    double currHeading = odo.getTheta();
    double objX = odo.getX() + currDistance * Math.cos(currHeading);
    double objY = odo.getY() + currDistance * Math.sin(currHeading);
    // no object detected
    if (currDistance > Util.SEARCH_DISTANCE)
        return false;
    // make sure object in sight is not wall
    if (objY &lt;= Util.SOUTH_MAX || objY >= Util.NORTH_MAX || objX &lt;= Util.WEST_MAX || objX >= Util.EAST_MAX) {
        return false;
    }
    boolean isObject;
    // always latch first encountered object at each cardinal
    if (this.lastDistanceDetected &lt; 0) {
        // at each iteration of scatter search, last distance is reset
        this.lastX = objX;
        this.lastY = objY;
        isObject = true;
    } else {
        // avoids latching the same object multiple times 
        isObject = (Odometer.euclideanDistance(new double[] { this.lastX, this.lastY }, new double[] { objX, objY }) > Util.WOOD_MIN_WIDTH);
    }
    // latch all important information
    if (isObject) {
        this.objectLocations.add(new double[] { objX, objY, currDistance, currHeading });
        this.lastDistanceDetected = currDistance;
        this.lastX = objX;
        this.lastY = objY;
    }
    return isObject;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDLzY7Q2Eeaa7p8tp3-_vA" name="inspectObject" specification="_TDLzYLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    odo.setMotorSpeed(Util.MOTOR_SLOW);
    odo.forwardMotors();
    //wait until close enough to determine if it's a styrofoam block
    while (usSensor.getMedianSample(Util.US_SAMPLES) > Util.BLOCK_DISTANCE &amp;&amp; Odometer.euclideanDistance(new double[] { odo.getX(), odo.getY() }, new double[] { X, Y }) > Util.BLOCK_DISTANCE) ;
    odo.stopMotors();
    //Scan left and right to find minimum distance to object. This should reduce the frequency of the robot detecting the block at a bad angle
    FOV(Util.SEARCH_FOV);
    // inspect object
    if (isStyrofoamBlock()) {
        searchState = SearchState.Idle;
        Main.state = Main.RobotState.Capture;
        Capture.captureState = CaptureState.Grab;
        Capture.setContext(cardinals[currCardinal]);
        return;
    } else {
        Main.forklift.liftUp();
        odo.moveCM(LINEDIR.Backward, 5, true);
    }
    nav.travelTo(cardinals[currCardinal][0], cardinals[currCardinal][1]);
    searchState = SearchState.Default;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDNBgLQ2Eeaa7p8tp3-_vA" name="FOV" specification="_TDMacLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    double minDistance = usSensor.getMedianSample(Util.US_SAMPLES);
    double minHeading = odo.getTheta();
    double ccwHeading = odo.getTheta() + angle / 2;
    double cwHeading = odo.getTheta() - angle / 2;
    odo.setMotorSpeed(Odometer.ROTATE_SPEED);
    //Rotate counterclockwise by angle/2
    odo.spin(Odometer.TURNDIR.CCW);
    while (Math.abs(Navigation.minimalAngle(odo.getTheta(), ccwHeading)) > Util.SCAN_THETA_THRESHOLD) {
        if (usSensor.getMedianSample(Util.US_SAMPLES) &lt; minDistance) {
            minHeading = odo.getTheta();
            minDistance = usSensor.getMedianSample(Util.US_SAMPLES);
        }
    }
    odo.stopMotors();
    odo.setMotorSpeed(Odometer.ROTATE_SPEED);
    //Rotate clockwise by angle/2
    odo.spin(Odometer.TURNDIR.CW);
    while (Math.abs(Navigation.minimalAngle(odo.getTheta(), cwHeading)) > Util.SCAN_THETA_THRESHOLD) {
        if (usSensor.getMedianSample(Util.US_SAMPLES) &lt; minDistance) {
            minHeading = odo.getTheta();
            minDistance = usSensor.getMedianSample(Util.US_SAMPLES);
        }
    }
    nav.turnTo(minHeading, true);
    odo.moveCM(Odometer.LINEDIR.Backward, Util.BLOCK_DISTANCE - minDistance, true);
    Main.forklift.liftDown();
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDNokbQ2Eeaa7p8tp3-_vA" name="travelToAxis" specification="_TDNBgbQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    String axis = (currCardinal % 2 == 0) ? &quot;Y&quot; : &quot;X&quot;;
    odo.setMotorSpeeds(Util.MOTOR_FAST, Util.MOTOR_FAST);
    if (frontwards)
        odo.forwardMotors();
    else
        odo.backwardMotors();
    switch(axis) {
        case &quot;X&quot;:
            while (odo.getX() &lt; cardinals[currCardinal][0] - Util.CM_TOLERANCE || odo.getX() > cardinals[currCardinal][0] + Util.CM_TOLERANCE) ;
            break;
        case &quot;Y&quot;:
            while (odo.getY() &lt; cardinals[currCardinal][1] - Util.CM_TOLERANCE || odo.getY() > cardinals[currCardinal][1] + Util.CM_TOLERANCE) ;
            break;
    }
    odo.stopMotors();
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDOPoLQ2Eeaa7p8tp3-_vA" name="isStyrofoamBlock" specification="_TDNokrQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    //		return (colorSensor.getColor()[0] &lt; colorSensor.getColor()[1]);
    boolean isStyrofoam;
    float[] measuredRGB = Main.colorSensor.getColor();
    //get unit vector
    double magnitude = Math.sqrt((double) (measuredRGB[0] * measuredRGB[0]) + (double) (measuredRGB[1] * measuredRGB[1]) + (double) (measuredRGB[2] * measuredRGB[2]));
    double[] normRGB = new double[3];
    normRGB[0] = (double) measuredRGB[0] / magnitude;
    normRGB[1] = (double) measuredRGB[1] / magnitude;
    normRGB[2] = (double) measuredRGB[2] / magnitude;
    //compare measurement to standard for styrofoam block with a dot product
    if (normRGB[0] * Util.FOAM_RGB_VECTOR[0] + normRGB[1] * Util.FOAM_RGB_VECTOR[1] + normRGB[2] * Util.FOAM_RGB_VECTOR[2] > Util.VECTOR_TOLERANCE) {
        isStyrofoam = true;
    } else {
        isStyrofoam = false;
    }
    return isStyrofoam;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDQE0rQ2Eeaa7p8tp3-_vA" name="colorDistance" specification="_TDOPobQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    return (float) Math.sqrt((a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]) + (a[2] - b[2]) * (a[2] - b[2]));
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDFswrQ2Eeaa7p8tp3-_vA" name="Search" visibility="public" method="_TDJ-MLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDIJALQ2Eeaa7p8tp3-_vA" name="odometer" type="_TBslobQ2Eeaa7p8tp3-_vA"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDIwELQ2Eeaa7p8tp3-_vA" name="colorSensor">
              <type xmi:type="uml:Class" href="chassis.uml#_S4BsQLQ2Eeaa7p8tp3-_vA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDJXILQ2Eeaa7p8tp3-_vA" name="usSensor">
              <type xmi:type="uml:Class" href="chassis.uml#_S4b78LQ2Eeaa7p8tp3-_vA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDJXIbQ2Eeaa7p8tp3-_vA" name="GREEN">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TDJXIrQ2Eeaa7p8tp3-_vA"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TDJXI7Q2Eeaa7p8tp3-_vA" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDJ-MbQ2Eeaa7p8tp3-_vA" name="run" visibility="public" method="_TDKlQLQ2Eeaa7p8tp3-_vA"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDKlQbQ2Eeaa7p8tp3-_vA" name="testForStyrofoam" visibility="private" method="_TDLMULQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDKlQrQ2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDLMUbQ2Eeaa7p8tp3-_vA" name="testForObject" visibility="private" method="_TDLMU7Q2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDLMUrQ2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDLzYLQ2Eeaa7p8tp3-_vA" name="inspectObject" visibility="private" method="_TDLzY7Q2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDLzYbQ2Eeaa7p8tp3-_vA" name="X">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDLzYrQ2Eeaa7p8tp3-_vA" name="Y">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDMacLQ2Eeaa7p8tp3-_vA" name="FOV" visibility="protected" method="_TDNBgLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDMacbQ2Eeaa7p8tp3-_vA" name="angle">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDNBgbQ2Eeaa7p8tp3-_vA" name="travelToAxis" visibility="private" method="_TDNokbQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDNokLQ2Eeaa7p8tp3-_vA" name="frontwards">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDNokrQ2Eeaa7p8tp3-_vA" name="isStyrofoamBlock" visibility="protected" isStatic="true" method="_TDOPoLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDNok7Q2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDOPobQ2Eeaa7p8tp3-_vA" name="colorDistance" visibility="public" isStatic="true" method="_TDQE0rQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDOPorQ2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDO2sLQ2Eeaa7p8tp3-_vA" name="a">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TDO2sbQ2Eeaa7p8tp3-_vA"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TDPdwLQ2Eeaa7p8tp3-_vA" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDPdwbQ2Eeaa7p8tp3-_vA" name="b">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TDQE0LQ2Eeaa7p8tp3-_vA"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TDQE0bQ2Eeaa7p8tp3-_vA" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <nestedClassifier xmi:type="uml:Enumeration" xmi:id="_TDCpcLQ2Eeaa7p8tp3-_vA" name="SearchState" visibility="public">
            <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TDCpcbQ2Eeaa7p8tp3-_vA" name="Default"/>
            <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TDCpcrQ2Eeaa7p8tp3-_vA" name="AtCardinal"/>
            <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TDCpc7Q2Eeaa7p8tp3-_vA" name="AtDropZone"/>
            <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TDCpdLQ2Eeaa7p8tp3-_vA" name="Inspecting"/>
            <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TDDQgLQ2Eeaa7p8tp3-_vA" name="Idle"/>
          </nestedClassifier>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_TDR6ALQ2Eeaa7p8tp3-_vA" name="USLocalizer" visibility="public">
          <generalization xmi:type="uml:Generalization" xmi:id="_TDShELQ2Eeaa7p8tp3-_vA" general="_-rxOUbQ1Eeaa7p8tp3-_vA"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDTIILQ2Eeaa7p8tp3-_vA" name="NO_WALL" visibility="private" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TDTIIbQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>45.0f</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDTIIrQ2Eeaa7p8tp3-_vA" name="THETA_THRESHOLD" visibility="private" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TDTII7Q2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>Math.PI / 6.0</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDTvMLQ2Eeaa7p8tp3-_vA" name="ROTATION_SPEED" visibility="public" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TDTvMbQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>60</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDTvMrQ2Eeaa7p8tp3-_vA" name="odo" visibility="private" type="_TBslobQ2Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDTvM7Q2Eeaa7p8tp3-_vA" name="usSensor" visibility="private" isUnique="false">
            <type xmi:type="uml:Class" href="chassis.uml#_S4b78LQ2Eeaa7p8tp3-_vA"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDUWQLQ2Eeaa7p8tp3-_vA" name="lastTheta" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDUWQbQ2Eeaa7p8tp3-_vA" name="step" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDUWQrQ2Eeaa7p8tp3-_vA" name="minimumDistance" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDU9ULQ2Eeaa7p8tp3-_vA" name="distanceUSSensor" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDYAobQ2Eeaa7p8tp3-_vA" name="USLocalizer" specification="_TDVkYLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    this.odo = odometer;
    this.usSensor = usSensor;
    this.distanceUSSensor = distanceUSSensor;
    step = 0;
    minimumDistance = NO_WALL;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDYAo7Q2Eeaa7p8tp3-_vA" name="doLocalization" specification="_TDYAorQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    Main.state = Main.RobotState.Localization;
    this.start();
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDZOwLQ2Eeaa7p8tp3-_vA" name="run" specification="_TDYnsLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    double angleA, angleB;
    //localize();
    double distance;
    odo.getMotors()[0].setSpeed(ROTATION_SPEED);
    odo.getMotors()[1].setSpeed(ROTATION_SPEED);
    while (!seesWall()) {
        odo.getMotors()[0].forward();
        odo.getMotors()[1].backward();
    }
    odo.getMotors()[0].setSpeed(0);
    odo.getMotors()[1].setSpeed(0);
    lastTheta = odo.getTheta();
    // keep rotating until the robot sees a wall, then latch the angle
    while (seesWall() || Math.abs(odo.getTheta() - lastTheta) &lt; THETA_THRESHOLD) {
        odo.getMotors()[0].setSpeed(ROTATION_SPEED);
        odo.getMotors()[1].setSpeed(ROTATION_SPEED);
        odo.getMotors()[0].forward();
        odo.getMotors()[1].backward();
        if ((distance = usSensor.getMedianSample(5)) &lt; minimumDistance)
            minimumDistance = distance;
        step++;
    }
    odo.getMotors()[0].setSpeed(0);
    odo.getMotors()[1].setSpeed(0);
    lastTheta = odo.getTheta();
    //Remove negative angles
    angleA = (odo.getTheta() &lt; 0.0) ? odo.getTheta() + 2 * Math.PI : odo.getTheta();
    // switch direction and wait until it sees no wall
    while (!seesWall() || Math.abs(odo.getTheta() - lastTheta) &lt; THETA_THRESHOLD) {
        odo.getMotors()[0].setSpeed(ROTATION_SPEED);
        odo.getMotors()[1].setSpeed(ROTATION_SPEED);
        odo.getMotors()[0].backward();
        odo.getMotors()[1].forward();
        step++;
    }
    step = 0;
    // keep rotating until the robot sees a wall, then latch the angle 
    while (seesWall() || step &lt; 30) {
        odo.getMotors()[0].backward();
        odo.getMotors()[1].forward();
        if ((distance = usSensor.getMedianSample(5)) &lt; minimumDistance)
            minimumDistance = distance;
        step++;
    }
    step = 0;
    //Remove negative angles
    angleB = (odo.getTheta() &lt; 0.0) ? odo.getTheta() + 2 * Math.PI : odo.getTheta();
    odo.getMotors()[0].stop();
    odo.getMotors()[1].stop();
    // angleA is clockwise from angleB, so assume the average of the
    // angles to the right of angleB is 45 degrees past 'north'
    double angle;
    if (//Calculate heading corrections as seen in tutorial
    angleA - angleB > 0)
        //Calculate heading corrections as seen in tutorial
        angle = (Math.PI / 4) - 0.5 * (angleA + angleB);
    else
        angle = (5 * Math.PI / 4) - 0.5 * (angleA + angleB);
    // update the odometer position (example to follow:)
    odo.setPosition(new double[] { minimumDistance - Util.SQUARE_LENGTH + distanceUSSensor, minimumDistance - Util.SQUARE_LENGTH + distanceUSSensor, angle + odo.getTheta() }, //Update odometer values
    new boolean[] { true, true, true });
    Navigation nav = new Navigation(odo);
    nav.travelTo(0, 0);
    nav.turnTo(Math.PI / 2, true);
    Sound.beepSequenceUp();
    // adjust coordinates and heading depending on the starting corner
    odo.setPosition(new double[] { Main.startingCornerCoord[0], Main.startingCornerCoord[1], Main.startingCornerCoord[2] }, Util.UPDATE_ALL);
    //slight pause to show localization is complete
    try {
        Thread.sleep(2000);
    } catch (Exception e) {
    }
    Main.state = Main.RobotState.Search;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDbD8LQ2Eeaa7p8tp3-_vA" name="seesWall" specification="_TDac4LQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    float sample = usSensor.getMedianSample(10);
    if (sample &lt; minimumDistance)
        minimumDistance = sample;
    return (sample &lt; NO_WALL);
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDVkYLQ2Eeaa7p8tp3-_vA" name="USLocalizer" visibility="public" method="_TDYAobQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDXZkLQ2Eeaa7p8tp3-_vA" name="odometer" type="_TBslobQ2Eeaa7p8tp3-_vA"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDXZkbQ2Eeaa7p8tp3-_vA" name="usSensor">
              <type xmi:type="uml:Class" href="chassis.uml#_S4b78LQ2Eeaa7p8tp3-_vA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDYAoLQ2Eeaa7p8tp3-_vA" name="distanceUSSensor">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDYAorQ2Eeaa7p8tp3-_vA" name="doLocalization" visibility="public" method="_TDYAo7Q2Eeaa7p8tp3-_vA"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDYnsLQ2Eeaa7p8tp3-_vA" name="run" visibility="public" method="_TDZOwLQ2Eeaa7p8tp3-_vA"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDac4LQ2Eeaa7p8tp3-_vA" name="seesWall" visibility="private" method="_TDbD8LQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDac4bQ2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_TDeuULQ2Eeaa7p8tp3-_vA" name="Test" visibility="public">
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDf8cLQ2Eeaa7p8tp3-_vA" name="LocalizationTest" specification="_TDfVYLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    USLocalizer localizer = new USLocalizer(odo, Main.usSensor, Util.US_TO_CENTER);
    localizer.doLocalization();
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDhKkLQ2Eeaa7p8tp3-_vA" name="SquareTest" specification="_TDf8cbQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    double[] waypoints = new double[laps * 8];
    OdometryCorrection correct = new OdometryCorrection(odo);
    correct.start();
    for (int c = 0; c &lt; laps; c++) {
        waypoints[8 * c] = 0.0;
        waypoints[8 * c + 1] = 0.0;
        waypoints[8 * c + 2] = length;
        waypoints[8 * c + 3] = 0.0;
        waypoints[8 * c + 4] = length;
        waypoints[8 * c + 5] = length;
        waypoints[8 * c + 6] = 0.0;
        waypoints[8 * c + 7] = length;
        if (Button.readButtons() == Button.ID_ESCAPE)
            return;
    }
    Navigation nav = new Navigation(odo);
    for (int c = 0; c &lt; waypoints.length / 2; c++) {
        nav.travelTo(waypoints[2 * c], waypoints[2 * c + 1]);
        if (Button.readButtons() == Button.ID_ESCAPE)
            return;
    }
    nav.travelTo(0, 0);
    nav.turnTo(0, true);
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDiYsbQ2Eeaa7p8tp3-_vA" name="StraightLineTest" specification="_TDhKkbQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    Navigation nav = new Navigation(odo);
    for (int c = 0; c &lt; 4; c++) {
        odo.moveCM(Odometer.LINEDIR.Forward, distance, true);
        if (Button.waitForAnyPress() == Button.ID_ESCAPE)
            break;
        odo.moveCM(Odometer.LINEDIR.Backward, distance, true);
        Button.waitForAnyPress();
        nav.turnBy(Math.PI / 2);
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDjm0bQ2Eeaa7p8tp3-_vA" name="NavigationTest" specification="_TDiYsrQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    Navigation nav = new Navigation(odo);
    for (int i = 0; i &lt; points.length; i++) {
        nav.travelTo(points[i][0], points[i][1]);
        if (stop) {
            Sound.beep();
            Button.waitForAnyPress();
        }
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDkN4rQ2Eeaa7p8tp3-_vA" name="TrackMeasureTest" specification="_TDjm0rQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    Navigation nav = new Navigation(odo);
    for (int i = 0; i &lt; rotations; i++) {
        nav.turnBy(2 * Math.PI);
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDk08LQ2Eeaa7p8tp3-_vA" name="ObjectDiffTest" specification="_TDkN47Q2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    while (Button.readButtons() != Button.ID_ESCAPE) {
        if (Main.usSensor.getMedianSample(Util.US_SAMPLES) &lt;= Util.BLOCK_DISTANCE) {
            if (Search.isStyrofoamBlock()) {
                Sound.beepSequenceUp();
                Main.lcd.setLine1(&quot;Styrofoam Block&quot;);
            } else {
                Sound.beep();
                Main.lcd.setLine1(&quot;Not Styrofoam Block&quot;);
            }
        }
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDlcALQ2Eeaa7p8tp3-_vA" name="RGBUnitVectorTest" specification="_TDk08bQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    float[] rgbRaw = new float[3];
    while (Button.readButtons() != Button.ID_ESCAPE) {
        rgbRaw = color.getColor();
        double magnitude = Math.sqrt(rgbRaw[0] * rgbRaw[0] + rgbRaw[1] * rgbRaw[1] + rgbRaw[2] * rgbRaw[2]);
        rgbRaw[0] = (int) (10 * rgbRaw[0] / magnitude);
        rgbRaw[1] = (int) (10 * rgbRaw[1] / magnitude);
        rgbRaw[2] = (int) (10 * rgbRaw[2] / magnitude);
        LCDInfo.displayMessage(rgbRaw[0] + &quot; &quot; + rgbRaw[1] + &quot; &quot; + rgbRaw[2]);
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDpGYbQ2Eeaa7p8tp3-_vA" name="ObjectDifferentiationTest" specification="_TDmqILQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    Search search = new Search(odometer, colorSensor, usSensor, GREEN);
    Main.state = Main.RobotState.Search;
    search.run();
    while (Main.state == Main.RobotState.Search &amp;&amp; Button.readButtons() != Button.ID_ESCAPE) ;
    search.interrupt();
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDqUgLQ2Eeaa7p8tp3-_vA" name="ForkliftTest" specification="_TDptcLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    int option;
    do {
        double tacho = Main.clawMotor.getTachoCount();
        option = Button.waitForAnyPress();
        switch(option) {
            case Button.ID_UP:
                Main.forklift.liftUp();
                break;
            case Button.ID_DOWN:
                Main.forklift.liftDown();
                break;
            case Button.ID_ENTER:
                Main.forklift.toggleGrip();
                break;
            default:
                break;
        }
    } while (option != Button.ID_ESCAPE);
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDq7kbQ2Eeaa7p8tp3-_vA" name="FullAvoidanceTest" specification="_TDqUgbQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    //set up
    Navigation nav = new Navigation(odometer);
    Main.lcd.setLine1(&quot;Put robot at origin&quot;);
    Main.lcd.setLine2(&quot;Place obstacle directly ahead&quot;);
    Button.waitForAnyPress();
    odometer.setPosition(new double[] { 0, 0, Math.PI / 2 }, new boolean[] { true, true, true });
    //obstacle avoidance
    //should cross paths with block
    nav.travelTo(0, 60);
    Main.lcd.setLine1(&quot;Will now treat next zone as RED&quot;);
    Main.lcd.setLine2(&quot;Press a button&quot;);
    Button.waitForAnyPress();
    //Red zone
    Main.RED = new double[][] { { odometer.getX() + 20, odometer.getY() - 20 }, { odometer.getX() + 50, odometer.getY() + 20 } };
    nav.travelTo(70, 60);
    Main.lcd.setLine1(&quot;Will attempt to go to corner&quot;);
    Main.lcd.setLine2(&quot;Should actually go to green zone&quot;);
    Button.waitForAnyPress();
    //Corner
    StartCorner corner = StartCorner.BOTTOM_LEFT;
    nav.travelTo(corner.getX(), corner.getY());
    Main.lcd.setLine1(&quot;Record results for all tests then exit&quot;);
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDrioLQ2Eeaa7p8tp3-_vA" name="AvoidanceTest" specification="_TDq7krQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    Navigation nav = new Navigation(odo);
    Button.waitForAnyPress();
    odo.setPosition(new double[] { 0, 0, Math.PI / 2 }, new boolean[] { true, true, true });
    double[] endPos = { 0, 150 };
    while (Odometer.euclideanDistance(endPos, new double[] { odo.getX(), odo.getY() }) > Util.CM_TOLERANCE) {
        nav.travelTo(endPos[0], endPos[1]);
        if (Navigation.PathBlocked) {
            Avoider.avoidState = Avoider.AvoidState.Enabled;
            try {
                Thread.sleep(2 * Util.SLEEP_PERIOD);
            } catch (Exception ex) {
            }
            while (Main.state == RobotState.Avoiding) {
                try {
                    Thread.sleep(Util.SLEEP_PERIOD);
                } catch (Exception ex) {
                }
            }
            Avoider.avoidState = AvoidState.Disabled;
        }
    }
    Main.lcd.setLine1(&quot;Done&quot;);
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TDsJsLQ2Eeaa7p8tp3-_vA" name="GripTest" specification="_TDriobQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    Main.forklift.grip();
    while (Button.waitForAnyPress() != Button.ID_ESCAPE) {
        Main.lcd.getLCD().clear();
        //Main.lcd.setLine2(&quot;Angle: &quot; + Main.forklift.getGrip());
        System.out.println(&quot;Angle: &quot; + Main.forklift.getGrip());
    }
    Main.forklift.ungrip();
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDfVYLQ2Eeaa7p8tp3-_vA" name="LocalizationTest" visibility="public" isStatic="true" method="_TDf8cLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDfVYbQ2Eeaa7p8tp3-_vA" name="odo" type="_TBslobQ2Eeaa7p8tp3-_vA"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDf8cbQ2Eeaa7p8tp3-_vA" name="SquareTest" visibility="public" isStatic="true" method="_TDhKkLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDf8crQ2Eeaa7p8tp3-_vA" name="odo" type="_TBslobQ2Eeaa7p8tp3-_vA"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDgjgLQ2Eeaa7p8tp3-_vA" name="laps">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDgjgbQ2Eeaa7p8tp3-_vA" name="length">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDhKkbQ2Eeaa7p8tp3-_vA" name="StraightLineTest" visibility="public" isStatic="true" method="_TDiYsbQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDhxoLQ2Eeaa7p8tp3-_vA" name="odo" type="_TBslobQ2Eeaa7p8tp3-_vA"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDiYsLQ2Eeaa7p8tp3-_vA" name="distance">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDiYsrQ2Eeaa7p8tp3-_vA" name="NavigationTest" visibility="public" isStatic="true" method="_TDjm0bQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDi_wLQ2Eeaa7p8tp3-_vA" name="odo" type="_TBslobQ2Eeaa7p8tp3-_vA"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDi_wbQ2Eeaa7p8tp3-_vA" name="points">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TDi_wrQ2Eeaa7p8tp3-_vA"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TDi_w7Q2Eeaa7p8tp3-_vA" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDjm0LQ2Eeaa7p8tp3-_vA" name="stop">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDjm0rQ2Eeaa7p8tp3-_vA" name="TrackMeasureTest" visibility="public" isStatic="true" method="_TDkN4rQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDkN4LQ2Eeaa7p8tp3-_vA" name="odo" type="_TBslobQ2Eeaa7p8tp3-_vA"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDkN4bQ2Eeaa7p8tp3-_vA" name="rotations">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDkN47Q2Eeaa7p8tp3-_vA" name="ObjectDiffTest" visibility="public" isStatic="true" method="_TDk08LQ2Eeaa7p8tp3-_vA"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDk08bQ2Eeaa7p8tp3-_vA" name="RGBUnitVectorTest" visibility="public" isStatic="true" method="_TDlcALQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDk08rQ2Eeaa7p8tp3-_vA" name="color">
              <type xmi:type="uml:Class" href="chassis.uml#_S4BsQLQ2Eeaa7p8tp3-_vA"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDmqILQ2Eeaa7p8tp3-_vA" name="ObjectDifferentiationTest" visibility="public" isStatic="true" method="_TDpGYbQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDnRMLQ2Eeaa7p8tp3-_vA" name="odometer" type="_TBslobQ2Eeaa7p8tp3-_vA"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDn4QLQ2Eeaa7p8tp3-_vA" name="colorSensor">
              <type xmi:type="uml:Class" href="chassis.uml#_S4BsQLQ2Eeaa7p8tp3-_vA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDn4QbQ2Eeaa7p8tp3-_vA" name="usSensor">
              <type xmi:type="uml:Class" href="chassis.uml#_S4b78LQ2Eeaa7p8tp3-_vA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDofULQ2Eeaa7p8tp3-_vA" name="GREEN">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TDofUbQ2Eeaa7p8tp3-_vA"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TDpGYLQ2Eeaa7p8tp3-_vA" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDptcLQ2Eeaa7p8tp3-_vA" name="ForkliftTest" visibility="public" isStatic="true" method="_TDqUgLQ2Eeaa7p8tp3-_vA"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDqUgbQ2Eeaa7p8tp3-_vA" name="FullAvoidanceTest" visibility="public" isStatic="true" method="_TDq7kbQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDq7kLQ2Eeaa7p8tp3-_vA" name="odometer" type="_TBslobQ2Eeaa7p8tp3-_vA"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDq7krQ2Eeaa7p8tp3-_vA" name="AvoidanceTest" visibility="public" isStatic="true" method="_TDrioLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TDq7k7Q2Eeaa7p8tp3-_vA" name="odo" type="_TBslobQ2Eeaa7p8tp3-_vA"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TDriobQ2Eeaa7p8tp3-_vA" name="GripTest" visibility="public" isStatic="true" method="_TDsJsLQ2Eeaa7p8tp3-_vA"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_TDtX0LQ2Eeaa7p8tp3-_vA" name="Util" visibility="public">
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDul8LQ2Eeaa7p8tp3-_vA" name="SQUARE_LENGTH" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TDul8bQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>30.48</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDvNALQ2Eeaa7p8tp3-_vA" name="FIELD_BOUNDARY" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TDvNAbQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>3.0 * SQUARE_LENGTH</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDvNArQ2Eeaa7p8tp3-_vA" name="GRIDLINE_THRESHOLD" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TDwbILQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>0.1</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDxCMLQ2Eeaa7p8tp3-_vA" name="ZONE_THRESHOLD" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TDxpQLQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>1.0</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDy3YLQ2Eeaa7p8tp3-_vA" name="FOAM_RGB_VECTOR" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TDzecLQ2Eeaa7p8tp3-_vA"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TDzecbQ2Eeaa7p8tp3-_vA" value="*"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TDzecrQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>{ 0.4101, 0.5421, 0.7334 }</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TDzec7Q2Eeaa7p8tp3-_vA" name="COLOR_BW" visibility="protected" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD0FgLQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>0.2</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD0FgbQ2Eeaa7p8tp3-_vA" name="VECTOR_TOLERANCE" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD0FgrQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>0.95</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD0Fg7Q2Eeaa7p8tp3-_vA" name="FOAM_HEIGHT" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD0skLQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>4.9</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD0skbQ2Eeaa7p8tp3-_vA" name="FOAM_WIDTH" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD0skrQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>10</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD0sk7Q2Eeaa7p8tp3-_vA" name="WOOD_MIN_WIDTH" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD1ToLQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>20.0</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD1TobQ2Eeaa7p8tp3-_vA" name="SEARCH_DISTANCE" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD1TorQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>45</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD1To7Q2Eeaa7p8tp3-_vA" name="BLOCK_DISTANCE" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD1TpLQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>8.0f</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD1TpbQ2Eeaa7p8tp3-_vA" name="BACKUP_DISTANCE" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD16sLQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>4.0</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD2hwLQ2Eeaa7p8tp3-_vA" name="NORTH_MAX" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD2hwbQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>10 * SQUARE_LENGTH</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD2hwrQ2Eeaa7p8tp3-_vA" name="SOUTH_MAX" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD3I0LQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>-0.5 * SQUARE_LENGTH</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD3I0bQ2Eeaa7p8tp3-_vA" name="EAST_MAX" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD3I0rQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>10 * SQUARE_LENGTH</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD3I07Q2Eeaa7p8tp3-_vA" name="WEST_MAX" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD3I1LQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>-0.5 * SQUARE_LENGTH</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD3v4LQ2Eeaa7p8tp3-_vA" name="SEARCH_FOV" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD3v4bQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>60 * Math.PI / 180</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD3v4rQ2Eeaa7p8tp3-_vA" name="APPROACH_BLOCK" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD3v47Q2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>2.0</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD4W8LQ2Eeaa7p8tp3-_vA" name="AVOID_DISTANCE" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD4W8bQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>15</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD4-ALQ2Eeaa7p8tp3-_vA" name="ROBOT_WIDTH" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD4-AbQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>25</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD4-ArQ2Eeaa7p8tp3-_vA" name="ROBOT_LENGTH" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD4-A7Q2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>30</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD6MILQ2Eeaa7p8tp3-_vA" name="FORKLIFT_HEIGHT" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD6zMLQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>20.0</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD7aQLQ2Eeaa7p8tp3-_vA" name="FORKLIFT_ROPE_RADIUS" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD8BULQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>1.45</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD8oYLQ2Eeaa7p8tp3-_vA" name="GRIP_STRENGTH" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD9PcLQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>180</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD9PcbQ2Eeaa7p8tp3-_vA" name="TOWER_DISTANCE" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD92gLQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>8.0</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD_EoLQ2Eeaa7p8tp3-_vA" name="FORKLIFT_ACCEL" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD_EobQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>300</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD_EorQ2Eeaa7p8tp3-_vA" name="CLAW_ACCEL" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD_rsLQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>500</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD_rsbQ2Eeaa7p8tp3-_vA" name="CLAW_TO_CENTER" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD_rsrQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>27.5</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD_rs7Q2Eeaa7p8tp3-_vA" name="DROP_SPACE" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TD_rtLQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>1.0</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TD_rtbQ2Eeaa7p8tp3-_vA" name="GRIP_THRESHOLD" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEASwLQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>-150.5</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEASwbQ2Eeaa7p8tp3-_vA" name="UPDATE_ALL" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TEA50LQ2Eeaa7p8tp3-_vA"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TEA50bQ2Eeaa7p8tp3-_vA" value="*"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEA50rQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>new boolean[] { true, true, true }</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEA507Q2Eeaa7p8tp3-_vA" name="ODOMETER_PERIOD" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_8heigBydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEA51LQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>//Hz
25</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEA51bQ2Eeaa7p8tp3-_vA" name="NAV_ACCELERATION" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEA51rQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>900</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEBg4LQ2Eeaa7p8tp3-_vA" name="DEG_TOLERANCE" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEBg4bQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>//degrees
3.0</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEBg4rQ2Eeaa7p8tp3-_vA" name="CM_TOLERANCE" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEBg47Q2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>//cm
1.0</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEBg5LQ2Eeaa7p8tp3-_vA" name="TRAVELTO_BW" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEBg5bQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>10</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TECH8LQ2Eeaa7p8tp3-_vA" name="MOTOR_FAST" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TECH8bQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>//deg/sec
200</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TECvALQ2Eeaa7p8tp3-_vA" name="MOTOR_SLOW" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEDWELQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>//deg/sec
100</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEDWEbQ2Eeaa7p8tp3-_vA" name="WHEEL_RADIUS" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TED9ILQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>//cm
2.18</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEEkMLQ2Eeaa7p8tp3-_vA" name="TRACK" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEFLQLQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>//cm 
16.04</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEFyULQ2Eeaa7p8tp3-_vA" name="US_TO_CENTER" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEFyUbQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>12.0</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEHAcLQ2Eeaa7p8tp3-_vA" name="INTENSITY_TO_CENTER" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEHngLQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>12</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEHngbQ2Eeaa7p8tp3-_vA" name="SLEEP_PERIOD" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEHngrQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>1000</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEHng7Q2Eeaa7p8tp3-_vA" name="US_SAMPLES" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEIOkLQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>6</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEIOkbQ2Eeaa7p8tp3-_vA" name="SCAN_THETA_THRESHOLD" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEIOkrQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>Math.PI / 60</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEIOk7Q2Eeaa7p8tp3-_vA" name="lcd" visibility="public" isStatic="true" isUnique="false">
            <type xmi:type="uml:Class" href="chassis.uml#_TBiNkrQ2Eeaa7p8tp3-_vA"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEJcsLQ2Eeaa7p8tp3-_vA" name="IP_ADDR" visibility="public" isLeaf="true" isStatic="true" type="_-rFR0bQ1Eeaa7p8tp3-_vA" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEJcsbQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>&quot;192.168.2.6&quot;</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEJcsrQ2Eeaa7p8tp3-_vA" name="TEAM_NUMBER" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEJcs7Q2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>15</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEKDwLQ2Eeaa7p8tp3-_vA" name="USE_WIFI" visibility="public" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEKDwbQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>false</body>
            </defaultValue>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TEI1orQ2Eeaa7p8tp3-_vA" name="setLCD" specification="_TEI1oLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    Util.lcd = lcd;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TEI1oLQ2Eeaa7p8tp3-_vA" name="setLCD" visibility="public" isStatic="true" method="_TEI1orQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TEI1obQ2Eeaa7p8tp3-_vA" name="lcd">
              <type xmi:type="uml:Class" href="chassis.uml#_TBiNkrQ2Eeaa7p8tp3-_vA"/>
            </ownedParameter>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_TELR4LQ2Eeaa7p8tp3-_vA" name="ThreadEnder" visibility="public">
          <generalization xmi:type="uml:Generalization" xmi:id="_TELR4bQ2Eeaa7p8tp3-_vA" general="_-rxOUbQ1Eeaa7p8tp3-_vA"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TENuILQ2Eeaa7p8tp3-_vA" name="run" specification="_TEL48LQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    while (true) if (Button.waitForAnyPress() == Button.ID_ESCAPE)
        System.exit(1);
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TEL48LQ2Eeaa7p8tp3-_vA" name="run" visibility="public" method="_TENuILQ2Eeaa7p8tp3-_vA"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_TEPjULQ2Eeaa7p8tp3-_vA" name="DropCheck" visibility="public">
          <generalization xmi:type="uml:Generalization" xmi:id="_TEQKYLQ2Eeaa7p8tp3-_vA" general="_-rxOUbQ1Eeaa7p8tp3-_vA"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEQKYbQ2Eeaa7p8tp3-_vA" name="odo" visibility="private" type="_TBslobQ2Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEQxcLQ2Eeaa7p8tp3-_vA" name="nav" visibility="private" type="_TCIDcLQ2Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEQxcbQ2Eeaa7p8tp3-_vA" name="search" visibility="private" type="_TC6toLQ2Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEQxcrQ2Eeaa7p8tp3-_vA" name="dropped" visibility="public" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TEUb0bQ2Eeaa7p8tp3-_vA" name="DropCheck" specification="_TERYgLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    this.odo = odo;
    this.nav = new Navigation(this.odo);
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TEVC4LQ2Eeaa7p8tp3-_vA" name="run" specification="_TEUb0rQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    while (true) {
        // only active during the return state
        dropped = false;
        while (Capture.captureState == CaptureState.Return) {
            //If claw tacho count is too close to -180 degrees, block was dropped
            if (Main.forklift.getGrip() &lt; Util.GRIP_THRESHOLD) {
                this.dropped = true;
                Capture.captureState = CaptureState.Idle;
                Main.forklift.ungrip();
                odo.stopMotors();
                // back off to avoid dropping the claw on top of the block
                odo.moveCM(LINEDIR.Backward, Util.ROBOT_WIDTH / 2, true);
                // 180 no scope
                search.FOV(Math.PI);
                // found lost block
                if (Search.isStyrofoamBlock())
                    Capture.captureState = CaptureState.Grab;
                else {
                    // give up on finding block, 
                    Capture.captureState = CaptureState.Idle;
                    nav.travelTo(search.cardinals[search.currCardinal][0], search.cardinals[search.currCardinal][1]);
                    Search.searchState = SearchState.Default;
                }
            }
        }
        try {
            Thread.sleep(Util.SLEEP_PERIOD);
        } catch (Exception ex) {
        }
    }
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TERYgLQ2Eeaa7p8tp3-_vA" name="DropCheck" visibility="public" method="_TEUb0bQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TET0wLQ2Eeaa7p8tp3-_vA" name="odo" type="_TBslobQ2Eeaa7p8tp3-_vA"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TEUb0LQ2Eeaa7p8tp3-_vA" name="search" type="_TC6toLQ2Eeaa7p8tp3-_vA"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TEUb0rQ2Eeaa7p8tp3-_vA" name="run" visibility="public" method="_TEVC4LQ2Eeaa7p8tp3-_vA"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_TEYGMLQ2Eeaa7p8tp3-_vA" name="Capture" visibility="public">
          <generalization xmi:type="uml:Generalization" xmi:id="_TEYtQLQ2Eeaa7p8tp3-_vA" general="_-rxOUbQ1Eeaa7p8tp3-_vA"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEYtQbQ2Eeaa7p8tp3-_vA" name="odo" visibility="private" type="_TBslobQ2Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEYtQrQ2Eeaa7p8tp3-_vA" name="nav" visibility="private" type="_TCIDcLQ2Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEYtQ7Q2Eeaa7p8tp3-_vA" name="search" visibility="private" type="_TC6toLQ2Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEZUULQ2Eeaa7p8tp3-_vA" name="GREEN" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TEZUUbQ2Eeaa7p8tp3-_vA"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TEZUUrQ2Eeaa7p8tp3-_vA" value="*"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEZUU7Q2Eeaa7p8tp3-_vA" name="towerPosition" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TEZUVLQ2Eeaa7p8tp3-_vA"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TEZUVbQ2Eeaa7p8tp3-_vA" value="*"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEZUVrQ2Eeaa7p8tp3-_vA" name="cardinalPoint" visibility="private" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TEZ7YLQ2Eeaa7p8tp3-_vA"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TEZ7YbQ2Eeaa7p8tp3-_vA" value="*"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEdlwLQ2Eeaa7p8tp3-_vA" name="captureState" visibility="public" isStatic="true" isUnique="false">
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TEdlwbQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>CaptureState.Idle</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEdlwrQ2Eeaa7p8tp3-_vA" name="clawMotor" visibility="private" type="_-hvIkrQ1Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TEeM0LQ2Eeaa7p8tp3-_vA" name="towerHeight" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TEgpFbQ2Eeaa7p8tp3-_vA" name="Capture" specification="_TEeM0bQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    this.odo = odometer;
    this.nav = new Navigation(this.odo);
    this.search = search;
    this.GREEN = GREEN;
    this.towerHeight = 0;
    this.towerPosition = new double[] { (GREEN[0][0] + GREEN[1][0]) / 2, (GREEN[0][1] + GREEN[1][1]) / 2 };
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TEhQIbQ2Eeaa7p8tp3-_vA" name="run" specification="_TEhQILQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    ///dc.start();
    while (true) {
        if (Main.state == RobotState.Avoiding)
            Capture.captureState = CaptureState.Idle;
        switch(captureState) {
            case Grab:
                //Descend forklift. 
                Main.forklift.liftDown();
                Main.forklift.grip();
                Main.forklift.liftUp();
                //Move on to Return
                captureState = CaptureState.Return;
                break;
            case Return:
                //Back up to avoid bumping into things when spinning
                odo.moveCM(Odometer.LINEDIR.Backward, 3, true);
                //Travel back to last cardinal point, this path is guaranteed to be clear
                nav.travelTo(cardinalPoint[0], cardinalPoint[1]);
                //if(dc.dropped){
                if (towerHeight == 0) {
                    //If towerHeight is 0, travel to a predetermined stacking area and drop the block
                    nav.travelTo(towerPosition[0], towerPosition[1]);
                    while (Navigation.PathBlocked) {
                        Avoider.avoidState = Avoider.AvoidState.Enabled;
                        try {
                            Thread.sleep(2 * Util.SLEEP_PERIOD);
                        } catch (Exception ex) {
                        }
                        while (Main.state == RobotState.Avoiding) {
                            try {
                                Thread.sleep(2 * Util.SLEEP_PERIOD);
                            } catch (Exception ex) {
                            }
                        }
                        nav.travelTo(towerPosition[0], towerPosition[1]);
                    }
                    captureState = CaptureState.Stack;
                    odo.moveCM(Odometer.LINEDIR.Backward, Util.CLAW_TO_CENTER, true);
                    break;
                }
                //If there is already a tower, travel towards towerPosition until the tower is detected.
                double targetHeading = Math.atan2(-odo.getY() + towerPosition[1], -odo.getX() + towerPosition[0]);
                //Turn to face tower position, stop motors
                nav.turnTo(targetHeading, true);
                //Move forward until the tower is detected.
                odo.setMotorSpeed(Odometer.NAVIGATE_SPEED);
                odo.forwardMotors();
                while (Main.usSensor.getMedianSample(Util.US_SAMPLES) > Util.TOWER_DISTANCE) ;
                odo.stopMotors();
                captureState = CaptureState.Stack;
                //}
                break;
            case Stack:
                //Descend lift to height of tower, increase towerHeight
                Main.forklift.liftToTower(towerHeight++);
                Main.forklift.ungrip();
                Main.forklift.liftUp();
                //Pass control back to search
                if (Search.searchState != SearchState.Default)
                    Search.searchState = SearchState.AtDropZone;
                captureState = CaptureState.Idle;
                break;
            case Idle:
                // iddle state, waiting for avoidance to return
                try {
                    Thread.sleep(Util.SLEEP_PERIOD);
                } catch (Exception e) {
                }
                break;
            default:
                break;
        }
    }
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TEh3NLQ2Eeaa7p8tp3-_vA" name="inBounds" specification="_TEhQIrQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    return (x &lt; width) &amp;&amp; (y &lt; height) &amp;&amp; x > 0 &amp;&amp; y > 0;
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TEieRLQ2Eeaa7p8tp3-_vA" name="setContext" specification="_TEieQLQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    Capture.cardinalPoint = cardinalPoint;
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TEeM0bQ2Eeaa7p8tp3-_vA" name="Capture" visibility="public" method="_TEgpFbQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TEgpELQ2Eeaa7p8tp3-_vA" name="odometer" type="_TBslobQ2Eeaa7p8tp3-_vA"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TEgpEbQ2Eeaa7p8tp3-_vA" name="search" type="_TC6toLQ2Eeaa7p8tp3-_vA"/>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TEgpErQ2Eeaa7p8tp3-_vA" name="GREEN">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TEgpE7Q2Eeaa7p8tp3-_vA"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TEgpFLQ2Eeaa7p8tp3-_vA" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TEhQILQ2Eeaa7p8tp3-_vA" name="run" visibility="public" method="_TEhQIbQ2Eeaa7p8tp3-_vA"/>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TEhQIrQ2Eeaa7p8tp3-_vA" name="inBounds" visibility="public" isStatic="true" method="_TEh3NLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TEhQI7Q2Eeaa7p8tp3-_vA" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TEh3MLQ2Eeaa7p8tp3-_vA" name="x">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TEh3MbQ2Eeaa7p8tp3-_vA" name="y">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TEh3MrQ2Eeaa7p8tp3-_vA" name="width">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TEh3M7Q2Eeaa7p8tp3-_vA" name="height">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TEieQLQ2Eeaa7p8tp3-_vA" name="setContext" visibility="public" isStatic="true" method="_TEieRLQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TEieQbQ2Eeaa7p8tp3-_vA" name="cardinalPoint">
              <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
              <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TEieQrQ2Eeaa7p8tp3-_vA"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TEieQ7Q2Eeaa7p8tp3-_vA" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <nestedClassifier xmi:type="uml:Enumeration" xmi:id="_TEZ7YrQ2Eeaa7p8tp3-_vA" name="CaptureState" visibility="public">
            <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TEZ7Y7Q2Eeaa7p8tp3-_vA" name="Grab"/>
            <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TEaicLQ2Eeaa7p8tp3-_vA" name="Return"/>
            <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TEaicbQ2Eeaa7p8tp3-_vA" name="Stack"/>
            <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_TEbJgLQ2Eeaa7p8tp3-_vA" name="Idle"/>
          </nestedClassifier>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_TFPo4LQ2Eeaa7p8tp3-_vA" name="OdometryCorrection" visibility="public">
          <generalization xmi:type="uml:Generalization" xmi:id="_TFQP8LQ2Eeaa7p8tp3-_vA" general="_-rxOUbQ1Eeaa7p8tp3-_vA"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TFQP8bQ2Eeaa7p8tp3-_vA" name="CORRECTION_PERIOD" visibility="private" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_8heigBydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TFQ3ALQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>10</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TFQ3AbQ2Eeaa7p8tp3-_vA" name="odometer" visibility="private" type="_TBslobQ2Eeaa7p8tp3-_vA" isUnique="false"/>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TFReELQ2Eeaa7p8tp3-_vA" name="THRESHOLD_THETA" visibility="private" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TFReEbQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>40.0 * Math.PI / 180.0</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TFReErQ2Eeaa7p8tp3-_vA" name="THRESHOLD_POS" visibility="private" isLeaf="true" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TFSFILQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>5.0</body>
            </defaultValue>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TFSFIbQ2Eeaa7p8tp3-_vA" name="count" visibility="public" isStatic="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TFSFIrQ2Eeaa7p8tp3-_vA" name="lastPosition" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_6j0jABydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TFSFI7Q2Eeaa7p8tp3-_vA" name="lastIntensity" visibility="private" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
          </ownedAttribute>
          <ownedAttribute xmi:type="uml:Property" xmi:id="_TFSsMLQ2Eeaa7p8tp3-_vA" name="useCorrection" visibility="private" isLeaf="true" isUnique="false">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusJava_LIBRARIES/JavaLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
            <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_TFSsMbQ2Eeaa7p8tp3-_vA" name="defaultValue">
              <language>JAVA</language>
              <body>true</body>
            </defaultValue>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFVvgbQ2Eeaa7p8tp3-_vA" name="OdometryCorrection" specification="_TFSsMrQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    this.odometer = odometer;
    count = 0;
    //x, y, theta
    lastPosition = new double[3];
    //need to set theta - may as well get current x and y
    odometer.getPosition(lastPosition, Util.UPDATE_ALL);
</body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TFWWkLQ2Eeaa7p8tp3-_vA" name="run" specification="_TFVvgrQ2Eeaa7p8tp3-_vA">
            <language>JAVA</language>
            <body>
    if (!useCorrection) {
        return;
    }
    long correctionStart, correctionEnd;
    lastIntensity = Main.gridLineDetector.getIntensity();
    while (true) {
        float intensity;
        //Stores the difference in intensity relative to last measurement
        float dI;
        correctionStart = System.currentTimeMillis();
        intensity = Main.gridLineDetector.getIntensity();
        //			if(intensity &lt; LightIntensitySensor.LINE_DETECTED &amp;&amp; lastIntensity &lt; LightIntensitySensor.LINE_DETECTED) continue; //Only register line when the last measurement DID NOT measure a line
        dI = lastIntensity - intensity;
        lastIntensity = intensity;
        if (//Detected black
        dI > LightIntensitySensor.LINE_DETECTED) {
            //				Sound.beep();
            double currentPosition[] = new double[3];
            double sensorPosition[] = new double[2];
            //Use trig to find current position of light sensor
            odometer.getPosition(currentPosition, Util.UPDATE_ALL);
            sensorPosition[0] = currentPosition[0] - Util.INTENSITY_TO_CENTER * Math.cos(currentPosition[2]);
            sensorPosition[1] = currentPosition[1] - Util.INTENSITY_TO_CENTER * Math.sin(currentPosition[2]);
            //check if vertical line...
            double distanceX = (sensorPosition[0] / Util.SQUARE_LENGTH) - Math.floor(sensorPosition[0] / Util.SQUARE_LENGTH);
            if (distanceX &lt; Util.GRIDLINE_THRESHOLD) {
                double sensorX = Math.floor(sensorPosition[0] / Util.SQUARE_LENGTH) * Util.SQUARE_LENGTH;
                odometer.setX(sensorX + Util.INTENSITY_TO_CENTER * Math.cos(currentPosition[0]));
            }
            //check if horizontal line...
            double distanceY = (sensorPosition[1] / Util.SQUARE_LENGTH) - Math.floor(sensorPosition[1] / Util.SQUARE_LENGTH);
            if (distanceY &lt; Util.GRIDLINE_THRESHOLD) {
                double sensorY = Math.floor(sensorPosition[1] / Util.SQUARE_LENGTH) * Util.SQUARE_LENGTH;
                odometer.setY(sensorY + Util.INTENSITY_TO_CENTER * Math.sin(currentPosition[1]));
            }
        }
        // this ensure the odometry correction occurs only once every period
        correctionEnd = System.currentTimeMillis();
        if (correctionEnd - correctionStart &lt; CORRECTION_PERIOD) {
            try {
                Thread.sleep(CORRECTION_PERIOD - (correctionEnd - correctionStart));
            } catch (InterruptedException e) {
            }
        }
    }
</body>
          </ownedBehavior>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFSsMrQ2Eeaa7p8tp3-_vA" name="OdometryCorrection" visibility="public" method="_TFVvgbQ2Eeaa7p8tp3-_vA">
            <ownedParameter xmi:type="uml:Parameter" xmi:id="_TFVvgLQ2Eeaa7p8tp3-_vA" name="odometer" type="_TBslobQ2Eeaa7p8tp3-_vA"/>
          </ownedOperation>
          <ownedOperation xmi:type="uml:Operation" xmi:id="_TFVvgrQ2Eeaa7p8tp3-_vA" name="run" visibility="public" method="_TFWWkLQ2Eeaa7p8tp3-_vA"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Dependency" xmi:id="_iCB0cLQ6Eeaa7p8tp3-_vA" client="_TCIDcLQ2Eeaa7p8tp3-_vA" supplier="_TDR6ALQ2Eeaa7p8tp3-_vA"/>
        <packagedElement xmi:type="uml:Dependency" xmi:id="_j4cjgLQ6Eeaa7p8tp3-_vA" client="_TDR6ALQ2Eeaa7p8tp3-_vA" supplier="_TBsloLQ2Eeaa7p8tp3-_vA"/>
        <packagedElement xmi:type="uml:Dependency" xmi:id="_m-km8LQ6Eeaa7p8tp3-_vA" client="_TC6toLQ2Eeaa7p8tp3-_vA" supplier="_TEYGMLQ2Eeaa7p8tp3-_vA"/>
        <packagedElement xmi:type="uml:Dependency" xmi:id="_s0yzcLQ6Eeaa7p8tp3-_vA" client="_TBslobQ2Eeaa7p8tp3-_vA" supplier="_TDR6ALQ2Eeaa7p8tp3-_vA"/>
        <packagedElement xmi:type="uml:Dependency" xmi:id="_vRwlILQ6Eeaa7p8tp3-_vA" client="_TBslobQ2Eeaa7p8tp3-_vA" supplier="_TCG1ULQ2Eeaa7p8tp3-_vA"/>
        <packagedElement xmi:type="uml:Dependency" xmi:id="_5Tz44LQ6Eeaa7p8tp3-_vA" client="_TEPjULQ2Eeaa7p8tp3-_vA" supplier="_TEYGMLQ2Eeaa7p8tp3-_vA"/>
        <packagedElement xmi:type="uml:Dependency" xmi:id="__7xEULQ6Eeaa7p8tp3-_vA" client="_TELR4LQ2Eeaa7p8tp3-_vA" supplier="_TBsloLQ2Eeaa7p8tp3-_vA"/>
        <packagedElement xmi:type="uml:Dependency" xmi:id="_EGszsLQ7Eeaa7p8tp3-_vA" client="_TC6toLQ2Eeaa7p8tp3-_vA" supplier="_TBsloLQ2Eeaa7p8tp3-_vA"/>
        <packagedElement xmi:type="uml:Dependency" xmi:id="_FW1l4LQ7Eeaa7p8tp3-_vA" client="_TDeuULQ2Eeaa7p8tp3-_vA" supplier="_TBsloLQ2Eeaa7p8tp3-_vA"/>
        <packagedElement xmi:type="uml:Dependency" xmi:id="_GWuVkLQ7Eeaa7p8tp3-_vA" client="_TDtX0LQ2Eeaa7p8tp3-_vA" supplier="_TBsloLQ2Eeaa7p8tp3-_vA"/>
        <packagedElement xmi:type="uml:Dependency" xmi:id="_IvCQwLQ7Eeaa7p8tp3-_vA" client="_TBslobQ2Eeaa7p8tp3-_vA" supplier="_TBsloLQ2Eeaa7p8tp3-_vA"/>
        <packagedElement xmi:type="uml:Dependency" xmi:id="_KYW_ALQ7Eeaa7p8tp3-_vA" client="_TBslobQ2Eeaa7p8tp3-_vA" supplier="_TCIDcLQ2Eeaa7p8tp3-_vA"/>
        <packagedElement xmi:type="uml:Dependency" xmi:id="_MWhU0LQ7Eeaa7p8tp3-_vA" client="_TFPo4LQ2Eeaa7p8tp3-_vA" supplier="_TBslobQ2Eeaa7p8tp3-_vA"/>
        <packagedElement xmi:type="uml:Dependency" xmi:id="_PIlMwLQ7Eeaa7p8tp3-_vA" client="_TCIDcLQ2Eeaa7p8tp3-_vA" supplier="_TCG1ULQ2Eeaa7p8tp3-_vA"/>
        <packagedElement xmi:type="uml:Dependency" xmi:id="_Q8-ikLQ7Eeaa7p8tp3-_vA" client="_TCG1ULQ2Eeaa7p8tp3-_vA" supplier="_TC6toLQ2Eeaa7p8tp3-_vA"/>
        <packagedElement xmi:type="uml:Dependency" xmi:id="_RlU8ALQ7Eeaa7p8tp3-_vA" client="_TCG1ULQ2Eeaa7p8tp3-_vA" supplier="_TEYGMLQ2Eeaa7p8tp3-_vA"/>
        <packagedElement xmi:type="uml:Dependency" xmi:id="__CrqwLQ7Eeaa7p8tp3-_vA" client="_TBsloLQ2Eeaa7p8tp3-_vA">
          <supplier xmi:type="uml:Package" href="chassis.uml#_S4BFMLQ2Eeaa7p8tp3-_vA"/>
        </packagedElement>
      </packagedElement>
    </packagedElement>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_-e1lkLQ1Eeaa7p8tp3-_vA">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_-e1lkbQ1Eeaa7p8tp3-_vA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/PapyrusJava/1#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://PapyrusJava_PROFILES/PapyrusJava.profile.uml#_j9REUByGEduN1bTiWJ0lyw"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_-fCZ4LQ1Eeaa7p8tp3-_vA">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_-fCZ4bQ1Eeaa7p8tp3-_vA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/Codegen/1#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://Codegen_PROFILES/Codegen.profile.uml#_fPDsIBa-EearhdjjJ6cVzQ"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_-fOAELQ1Eeaa7p8tp3-_vA">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_-fOAEbQ1Eeaa7p8tp3-_vA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UML_PROFILES/Standard.profile.uml#_0"/>
    </profileApplication>
  </uml:Model>
  <PapyrusJava:External xmi:id="_-hbmkLQ1Eeaa7p8tp3-_vA" name="lejos.robotics.SampleProvider" base_Classifier="_-fQcULQ1Eeaa7p8tp3-_vA"/>
  <PapyrusJava:External xmi:id="_-hnz0LQ1Eeaa7p8tp3-_vA" name="lejos.hardware.sensor.EV3ColorSensor" base_Classifier="_-hnMwLQ1Eeaa7p8tp3-_vA"/>
  <PapyrusJava:External xmi:id="_-hqQELQ1Eeaa7p8tp3-_vA" name="java.lang.Object" base_Classifier="_-hpB8LQ1Eeaa7p8tp3-_vA"/>
  <PapyrusJava:External xmi:id="_-hreMLQ1Eeaa7p8tp3-_vA" name="lejos.hardware.port.Port" base_Classifier="_-hqQE7Q1Eeaa7p8tp3-_vA"/>
  <PapyrusJava:External xmi:id="_-hwWsLQ1Eeaa7p8tp3-_vA" name="lejos.hardware.motor.EV3LargeRegulatedMotor" base_Classifier="_-hvIkrQ1Eeaa7p8tp3-_vA"/>
  <PapyrusJava:External xmi:id="_-hxk0LQ1Eeaa7p8tp3-_vA" name="lejos.hardware.motor.EV3MediumRegulatedMotor" base_Classifier="_-hw9wLQ1Eeaa7p8tp3-_vA"/>
  <PapyrusJava:External xmi:id="_-h3rcLQ1Eeaa7p8tp3-_vA" name="lejos.hardware.sensor.SensorModes" base_Classifier="_-h2dUbQ1Eeaa7p8tp3-_vA"/>
  <PapyrusJava:External xmi:id="_-iD4sLQ1Eeaa7p8tp3-_vA" name="lejos.hardware.lcd.TextLCD" base_Classifier="_-iCqk7Q1Eeaa7p8tp3-_vA"/>
  <PapyrusJava:External xmi:id="_-rGf8LQ1Eeaa7p8tp3-_vA" name="java.lang.String" base_Classifier="_-rFR0bQ1Eeaa7p8tp3-_vA"/>
  <PapyrusJava:External xmi:id="_-rObwLQ1Eeaa7p8tp3-_vA" name="java.util.HashMap" base_Classifier="_-rMmkbQ1Eeaa7p8tp3-_vA"/>
  <PapyrusJava:External xmi:id="_-rTUQLQ1Eeaa7p8tp3-_vA" name="java.io.IOException" base_Classifier="_-rSGILQ1Eeaa7p8tp3-_vA"/>
  <PapyrusJava:External xmi:id="_-rYMwLQ1Eeaa7p8tp3-_vA" name="lejos.utility.TimerListener" base_Classifier="_-rW-oLQ1Eeaa7p8tp3-_vA"/>
  <PapyrusJava:External xmi:id="_-rb3ILQ1Eeaa7p8tp3-_vA" name="lejos.utility.Timer" base_Classifier="_-rbQELQ1Eeaa7p8tp3-_vA"/>
  <PapyrusJava:External xmi:id="_-ryccLQ1Eeaa7p8tp3-_vA" name="java.lang.Thread" base_Classifier="_-rxOUbQ1Eeaa7p8tp3-_vA"/>
  <PapyrusJava:External xmi:id="_-r1fwLQ1Eeaa7p8tp3-_vA" name="java.awt.Rectangle" base_Classifier="_-r0Ro7Q1Eeaa7p8tp3-_vA"/>
  <PapyrusJava:External xmi:id="_-vge0LQ1Eeaa7p8tp3-_vA" name="java.io.DataInputStream" base_Classifier="_-vepoLQ1Eeaa7p8tp3-_vA"/>
  <standard:Create xmi:id="_TCU3wLQ2Eeaa7p8tp3-_vA" base_BehavioralFeature="_TCSbgLQ2Eeaa7p8tp3-_vA"/>
  <standard:Create xmi:id="_TCkvYLQ2Eeaa7p8tp3-_vA" base_BehavioralFeature="_TChsErQ2Eeaa7p8tp3-_vA"/>
  <standard:Create xmi:id="_TDHh8LQ2Eeaa7p8tp3-_vA" base_BehavioralFeature="_TDFswrQ2Eeaa7p8tp3-_vA"/>
  <standard:Create xmi:id="_TDWygLQ2Eeaa7p8tp3-_vA" base_BehavioralFeature="_TDVkYLQ2Eeaa7p8tp3-_vA"/>
  <standard:Create xmi:id="_TETNsLQ2Eeaa7p8tp3-_vA" base_BehavioralFeature="_TERYgLQ2Eeaa7p8tp3-_vA"/>
  <standard:Create xmi:id="_TEgCALQ2Eeaa7p8tp3-_vA" base_BehavioralFeature="_TEeM0bQ2Eeaa7p8tp3-_vA"/>
  <standard:Create xmi:id="_TEtdYLQ2Eeaa7p8tp3-_vA" base_BehavioralFeature="_TErBIbQ2Eeaa7p8tp3-_vA"/>
  <standard:Create xmi:id="_TFUhYLQ2Eeaa7p8tp3-_vA" base_BehavioralFeature="_TFSsMrQ2Eeaa7p8tp3-_vA"/>
  <standard:Create xmi:id="_TFcdMLQ2Eeaa7p8tp3-_vA" base_BehavioralFeature="_TFaoAbQ2Eeaa7p8tp3-_vA"/>
  <PapyrusJava:External xmi:id="_TFguoLQ2Eeaa7p8tp3-_vA" name="IOException" base_Classifier="_TFe5cLQ2Eeaa7p8tp3-_vA"/>
  <standard:Create xmi:id="_TFjx8LQ2Eeaa7p8tp3-_vA" base_BehavioralFeature="_TFh8wLQ2Eeaa7p8tp3-_vA"/>
  <standard:Create xmi:id="_TFrtwLQ2Eeaa7p8tp3-_vA" base_BehavioralFeature="_TFp4kLQ2Eeaa7p8tp3-_vA"/>
</xmi:XMI>
